name: "CI/CD"

# Controls when the action will run. Triggers the workflow on push or pull request events but only for the master branch
on:
  push:
    branches-ignore:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# GLobal environment variables
env:
  COLOR_DEBUG: "dim blue"
  COLUMNS: 120
  EFUNCS_COLOR: 1
  EINTERACTIVE: 1
  EPROGRESS_DELAY: 15
  EPROGRESS_INLINE: 0
  EPROGRESS_SPINNER: 0
  REGISTRY: "ghcr.io"
  TERM: "xterm-256color"

#-----------------------------------------------------------------------------------------------------------------------
#
# Pipeline Jobs
#
#-----------------------------------------------------------------------------------------------------------------------
jobs:

  #--------------------------------------------------------------------------------------------------------------------
  #
  # LINUX
  #
  #--------------------------------------------------------------------------------------------------------------------
  Linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        container:
          - "alpine-3.15"
          - "alpine-3.14"
          - "archlinux"
          - "centos-8"
          - "centos-7"
          - "debian-11"
          - "debian-10"
          - "fedora-35"
          - "fedora-33"
          - "gentoo"
          - "rocky-8"
          - "ubuntu-20.04"
          - "ubuntu-18.04"

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CICD_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Docker
        run: make docker-${{ matrix.container }} pull=1 push=1

      - name: Lint
        run: make dlint-${{ matrix.container }}

      - name: Self Test
        run: bin/eretry make dselftest-${{ matrix.container }}

      - name: Test
        run: make dtest-${{ matrix.container }} failfast=1 failures=5

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.container }}
          path: .work/**

  #--------------------------------------------------------------------------------------------------------------------
  #
  # MacOS
  #
  #--------------------------------------------------------------------------------------------------------------------
  MacOS:
    strategy:
      fail-fast: true
      matrix:
        os: ["11.0", "10.15"]

    runs-on: macos-${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: install/all

      - name: Lint
        run: bin/bashlint --severity=error

      - name: Self Test
        run: bin/eretry bin/selftest

      - name: Test
        run: bin/etest --work-dir .work/output --failfast --failures 5

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: macos-${{ matrix.os }}
          path: .work/**

  #--------------------------------------------------------------------------------------------------------------------
  #
  # Test Results
  #
  #--------------------------------------------------------------------------------------------------------------------
  test-results:
    name: "Tests Results"
    needs: [Linux, MacOS]
    runs-on: ubuntu-latest
    if: always() && github.ref != 'refs/heads/develop'

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Details
        run: find artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        with:
          check_name: Publish Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: artifacts/**/etest.xml

  #--------------------------------------------------------------------------------------------------------------------
  #
  # Release
  #
  #--------------------------------------------------------------------------------------------------------------------
  release:
    name: "Release"
    needs: [Linux, MacOS]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.CICD_TOKEN }}

      - name: Version
        run: |
            # Setup Git so we can commit
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"

            # Increment and push new version
            bin/ebash cicd_create_next_version_tag --push

      - name: Release
        run: bin/ebash cicd_release
