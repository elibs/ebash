#!/bin/sh

set -e

########################################################################################################################
####
#### WARNING: This script is meant to be runnable in any Linux OS including older ones which do not have bash installed.
####
#### DO NOT change the she-bang at the top to bash.
####
########################################################################################################################

#-----------------------------------------------------------------------------------------------------------------------
#
# Main
#
#-----------------------------------------------------------------------------------------------------------------------

UNAME="$(uname -s)"

if [ "${UNAME}" = "Darwin" ]; then
    DISTRO="darwin"
elif [ -e "/etc/os-release" ]; then
    DISTRO=$(awk -F'=' '/^ID=/ {print $2}' /etc/os-release | tr -d '"')
elif which lsb_release &>/dev/null; then
    DISTRO=$(lsb_release -is)
else
    DISTRO="${UNAME}"
fi

DISTRO=$(echo "${DISTRO}" | tr "[A-Z]" "[a-z]")

echo ">> Installing dependencies for ${DISTRO}"

export DEBIAN_FRONTEND=noninteractive

#----------------------------------------------------------------------------------------------------------------------
#
# Alpine Linux
#
#----------------------------------------------------------------------------------------------------------------------
if [ "${DISTRO}" = "alpine" ]; then

    echo "http://dl-3.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

    apk add              \
        bash             \
        bzip2            \
        cdrkit           \
        coreutils        \
        cpio             \
        curl             \
        debootstrap      \
        dialog           \
        diffutils        \
        docker           \
        file             \
        findutils        \
        gawk             \
        git              \
        gnupg            \
        grep             \
        gzip             \
        gettext          \
        iproute2         \
        iputils          \
        jq               \
        ncurses          \
        ncurses-terminfo \
        net-tools        \
        perl             \
        procps           \
        pstree           \
        squashfs-tools   \
        util-linux       \
        xz

#----------------------------------------------------------------------------------------------------------------------
#
# Arch Linux
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "arch" ]; then

    pacman -Syu --overwrite "/usr/bin/docker-init" --noconfirm  \
        cdrkit              \
        cpio                \
        debootstrap         \
        dialog              \
        diffutils           \
        docker              \
        gcc                 \
        gettext             \
        git                 \
        jq                  \
        make                \
        net-tools           \
        squashfs-tools      \
        which

#----------------------------------------------------------------------------------------------------------------------
#
# CentOS
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "centos" ]; then

    VERSION=$(awk -F'[="]*' '/^VERSION_ID=/ {print $2}' /etc/os-release)

    yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION}.noarch.rpm

    yum install -y          \
        bzip2               \
        cpio                \
        debootstrap         \
        dialog              \
        diffutils           \
        docker              \
        file                \
        genisoimage         \
        gettext             \
        git                 \
        glibc               \
        gzip                \
        iproute             \
        iptables            \
        jq                  \
        ncurses             \
        net-tools           \
        perl                \
        psmisc              \
        squashfs-tools      \
        which               \
        xz

    # Quiet warning from podman
    touch /etc/containers/nodocker

    # Default podman configuration prevents overlayfs from working properly.
    sed -i 's|#mount_program = "/usr/bin/fuse-overlayfs"|mount_program = "/usr/bin/fuse-overlayfs"|' \
        /etc/containers/storage.conf

    if [ -e /usr/share/containers/containers.conf ]; then
        # Default cgroup settings for running podman inside docker doesn't work properly.
        # The recommendation in https://github.com/containers/podman/issues/6982 is to set cgroup_manager to "cgroupfs"
        sed -i 's|# cgroup_manager = "systemd"|cgroup_manager = "cgroupfs"|' \
            /usr/share/containers/containers.conf
    fi

#----------------------------------------------------------------------------------------------------------------------
#
# Debian
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "debian" ]; then

    apt update

    apt install -y                  \
        apt-transport-https         \
        bsdmainutils                \
        bzip2                       \
        ca-certificates             \
        cpio                        \
        curl                        \
        debootstrap                 \
        dialog                      \
        file                        \
        genisoimage                 \
        gettext                     \
        git                         \
        gnupg2                      \
        iproute2                    \
        iptables                    \
        jq                          \
        net-tools                   \
        procps                      \
        psmisc                      \
        software-properties-common  \
        squashfs-tools              \
        xz-utils                    \

    # Install docker
    curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    apt update
    apt install -y docker-ce

#----------------------------------------------------------------------------------------------------------------------
#
# Fedora
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "fedora" ]; then

    dnf install -y          \
        bzip2               \
        cpio                \
        debootstrap         \
        dialog              \
        diffutils           \
        dnf-plugins-core    \
        file                \
        findutils           \
        genisoimage         \
        gettext             \
        git                 \
        glibc               \
        iproute             \
        iptables            \
        iputils             \
        jq                  \
        ncurses             \
        net-tools           \
        perl-core           \
        procps              \
        psmisc              \
        squashfs-tools      \
        which               \
        xz

    # Install docker
    dnf config-manager -y --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
    dnf install -y docker-ce docker-ce-cli containerd.io

#----------------------------------------------------------------------------------------------------------------------
#
# Gentoo
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "gentoo" ]; then

    emerge-webrsync

    emerge --autounmask-write --autounmask-continue --noreplace --quiet \
        app-emulation/docker \
        cdrtools             \
        cpio                 \
        debootstrap          \
        dev-vcs/git          \
        dialog               \
        gettext              \
        jq                   \
        net-tools            \
        squashfs-tools

#----------------------------------------------------------------------------------------------------------------------
#
# Ubuntu
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "ubuntu" ]; then

    apt update

    apt install -y                 \
        apt-transport-https        \
        bsdmainutils               \
        bzip2                      \
        ca-certificates            \
        cgroup-lite                \
        cpio                       \
        curl                       \
        debootstrap                \
        dialog                     \
        file                       \
        gettext                    \
        git                        \
        gnupg-agent                \
        iproute2                   \
        iptables                   \
        iputils-ping               \
        jq                         \
        mkisofs                    \
        net-tools                  \
        psmisc                     \
        software-properties-common \
        squashfs-tools             \
        xz-utils

    # Install docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io

#----------------------------------------------------------------------------------------------------------------------
#
# MacOS
#
#----------------------------------------------------------------------------------------------------------------------
elif [ "${DISTRO}" = "darwin" ]; then

    brew update-reset

    # Brew is lame. If you try to install something that's already installed it returns an error. So we have to first
    # check if it is installed and skip it if so.
    brew_install()
    {
        for pkg in "${@}"; do
            if ! brew ls --versions "${pkg}"; then
                brew install "${pkg}"
            fi
        done
    }

    brew_install       \
        bash           \
        curl           \
        docker         \
        docker-machine \
        coreutils      \
        findutils      \
        gnu-sed        \
        grep           \
        jq             \
        pstree

#----------------------------------------------------------------------------------------------------------------------
#
# UNKNOWN
#
#----------------------------------------------------------------------------------------------------------------------
else
    echo "Unknown OS: ${DISTRO}"
    exit 1
fi

exit 0
