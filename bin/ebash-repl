#!/usr/bin/env bash
#
# Copyright 2011-2021, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# Allow calling function documentation in ebash. This must happen before sourcing ebash.
__EBASH_SAVE_DOC=1

reload()
{
    : ${EBASH_HOME:=$(dirname $0)/..}
    : ${EBASH:=${EBASH_HOME}/share}
    source ${EBASH}/ebash.sh || { echo "Failed to source ${EBASH}/ebash.sh" ; exit 1 ; }
    EBASH=$(readlink -f ${EBASH})
    EBASH_HOME=$(readlink -f ${EBASH_HOME})
}
reload

HISTFILE=$(mktemp --tmpdir ebash-repl-$$-XXXXXX)
trap_add "rm --force \"${HISTFILE}\""

: ${EBASH_PROMPT:=$(ecolor bold green)$'EBASH> '$(ecolor none)}

# Trap SIGINT during read in such a way that Ctrl-C
#    1) doesn't blow us up
#    2) resets the read, giving you an empty input buffer
#
DEFAULT_SIGINT=$(trap -p SIGINT)
protected_read()
{
    # I don't strictly understand this bash behavior, but having "return" in this trap ensures that when you start
    # typing on a line and hit Ctrl-C, that you get a new clean line.
    #
    # The return code does not get passed to the caller, which is strange.  But having return there definitely makes a
    # behavior difference.
    trap "cmd='' ; echo ; ${DEFAULT_SIGINT} ; return 0" SIGINT
    read "${@}"
}

repl()
{
    while true ; do
        # Note: In typical ebash style, I would probably use tryrc here, but I want to make sure that all commands are
        # executed in the same shell.
        protected_read -e -r -p "${EBASH_PROMPT}" cmd && rc=0 || rc=$?

        edebug "$(lval rc cmd)"
        if [[ ${rc} -eq 1 ]] ; then
            # Exit code 1 from read means that it encountered EOF (e.g. the user probably hit Ctrl-D)
            exit 0
        fi

        # Skip empty commands
        [[ -z ${cmd} ]] && continue

        history -s "${cmd}"
        eval ${cmd}
    done
}

# It's really annoying to die when you're working interactively and you type an unbound variable.
set +u

# Likewise, it's a shame to lose your shell and all its variables just because die was called.  This way, you print the
# stack trace, but proceed to work in the same shell afterward.
die_handler()
{
    edebug "Error detected and ignored."
    cmd=""
    return 0
}

#-----------------------------------------------------------------------------------------------------------------------
opt_usage main <<'END'

One of the cool things ebash provides is an interactive [REPL](https://en.wikipedia.org/wiki/read%e2%80%93eval%e2%80%93print_loop)
interface. this makes it super easy to interactively test out code to see how it behaves or debug failures.

here's an example:

```shell
$ .ebash/bin/ebash
>> ebash ebash="/home/marshall/code/liqid/os/.ebash/share"
ebash> einfo "testing"
>> testing
ebash> assert_true true
ebash> assert_false true

>> assert failed (rc=0) :: true
   :: assert.sh:72         | assert_false
   :: ebash-repl:64        | repl
   :: ebash-repl:91        | main
ebash> exit
```
END
#-----------------------------------------------------------------------------------------------------------------------
$(opt_parse \
    ":load l | Load the specified file prior to running the interactive interpreter.")

if [[ -n "${load}" ]] ; then
    source "${load}"
fi

einfo "ebash $(lval EBASH)"

repl
