#!/usr/bin/env bash
#
# Copyright 2011-2021, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}
source "${EBASH}/ebash.sh" || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

#-----------------------------------------------------------------------------------------------------------------------
opt_usage main <<'END'
This utility isn't yet all that advanced, but it's good for timing various operations in bash and helping you to
understand the time spent on each.

This should at least help us determine what sort of performance effects we have as we change things in ebash. Or at
least, it would do that once we actually test useful things in here. For now, it's mostly useful when you're willing to
edit the script and add the timing of things you're curious about.

Notes to developers:

   * If you add a function BENCH_<something>, you will have created a new item to benchmark. Next time you run ebench,
     it will be run <count> times.

   * If you add an additional function named PREBENCH_<something>, where
     <something> is the same as above, that function will be run once prior to the repeated runs of BENCH_<something>.

   * You can also create POSTBENCH_<something> for cleanup if need be.
END
$(opt_parse \
    ":filter f     | Only benchmarks matching this filter will be run. By default all are run." \
    ":exclude x    | Benchmarks whose name match this filter will not be run. By default, all are run." \
    ":count c=1000 | Basline number of times to run each test.")


timestamp()
{
    date '+%s%3N'
}

BENCH_func_call_overhead()
{
    :
}

BENCH_trivial_subshell()
{
    (
        :
    )
}

PREBENCH_subshell_with_die_on_abort()
{
    (( count = count / 100 ))
}

BENCH_subshell_with_die_on_abort()
{
    (
        die_on_abort
    )
}

BENCH_local_variable_assign()
{
    local var=a
    return 0
}

BENCH_call_true_binary()
{
    command true
}

BENCH_command_subst()
{
    local var=""
    var=$(echo hi)
}

BENCH_echo()
{
    echo "####################################################################################################"
}

PREBENCH_einfo()
{
    (( count = count / 10 ))
}

BENCH_einfo()
{
    EMSG_PREFIX="" einfo "####################################################################################################"
}

PREBENCH_einfo_msg_prefix_all()
{
    (( count = count / 10 ))
}

BENCH_einfo_msg_prefix_all()
{
    EMSG_PREFIX="all" einfo "####################################################################################################"
}

BENCH_simple_opt_parse()
{
    $(opt_parse)
}

PREBENCH_debug_trap()
{
    EBASH_LEVEL=0
    #trap "[[ ${BASH_SUBSHELL} != ${EBASH_LEVEL} ]] && { EBASH_LEVEL=${BASH_SUBSHELL} ; edebug spawned new \$BASHPID ; }" DEBUG
    #trap "[[ ${BASH_SUBSHELL} != ${EBASH_LEVEL} ]] && { EBASH_LEVEL=${BASH_SUBSHELL} ; :  ; }" DEBUG
    trap "if [[ ${BASH_SUBSHELL} != ${EBASH_LEVEL:-} ]] ; then
            EBASH_LEVEL=${BASH_SUBSHELL}
          fi " DEBUG
}

debug_trap_shared()
{
    true
    (
        if [[ A == B ]] ; then
            true
        fi
        (( a = $RANDOM + 10 ))
        VAR=$a
        edebug "A"
    )
}

BENCH_debug_trap()
{
    debug_trap_shared
}

BENCH_no_debug_trap()
{
    debug_trap_shared
}

BENCH_no_debug_trap_plus_comparison()
{
    if [[ ${BASH_SUBSHELL} != ${EBASH_LEVEL:-} ]] ; then
        EBASH_LEVEL=${BASH_SUBSHELL}
    fi
    debug_trap_shared
}

BENCH_edebug_disabled()
{
    EDEBUG=0 edebug ""
}

BENCH_edebug_enabled()
{
    ( EDEBUG=1 edebug "" )
}

BENCH_edebug_pipe_disabled()
{
    ( EDEBUG=0 echo "" | edebug )
}

BENCH_edebug_pipe_enabled()
{
    ( EDEBUG=1 echo "" | edebug )
}

BENCH_edebug_pipe_disabled_massive_output()
{
    ( EDEBUG=0 dmesg | edebug )
}

BENCH_array_join()
{
    local suffixes=() output=""

    suffixes=( ".squashfs" ".iso" ".tar" ".tar.gz" ".tgz" ".taz" ".tar.bz2" ".tz2" ".tbz2" ".tbz" ".tar.xz" ".txz" ".tar.lz" ".tlz" ".cpio" ".cpio.gz" ".cgz" ".caz" ".cpio.bz2" ".cz2" ".cbz2" ".cbz" ".cpio.xz" ".cxz" ".cpio.lz" ".clz" )
    output=$(array_join suffixes "|")
}

BENCH_array_join_sed()
{
    local suffixes=() output=""

    suffixes=( ".squashfs" ".iso" ".tar" ".tar.gz" ".tgz" ".taz" ".tar.bz2" ".tz2" ".tbz2" ".tbz" ".tar.xz" ".txz" ".tar.lz" ".tlz" ".cpio" ".cpio.gz" ".cgz" ".caz" ".cpio.bz2" ".cz2" ".cbz2" ".cbz" ".cpio.xz" ".cxz" ".cpio.lz" ".clz" )
    output=$(echo "${suffixes[@]}" | sed -e 's/ /|/g')
}

#-----------------------------------------------------------------------------------------------------------------------
#
# MAIN
#
#-----------------------------------------------------------------------------------------------------------------------

BENCH_FUNCS=( $(declare -F | awk '$3 ~ "^BENCH_" {print $3}') )

RESULTS_FILE=$(readlink -f results)
: >${RESULTS_FILE}

export EINTERACTIVE=1

for func in "${BENCH_FUNCS[@]}" ; do

    # Skip things that a) don't match a filter if one was specified or b) do match the exclude if one was specified.
    [[ -n ${filter:-}  && ! ${func} =~ ${filter}  ]] && continue
    [[ -n ${exclude:-} &&   ${func} =~ ${exclude} ]] && continue

    # Toss it all in a subshell so individual runs can't create state that other ones would see
    (
        # Run a setup function that can prepare for this benchmark without being included in the total time.
        if declare -f "PRE${func}" &>/dev/null ; then
            "PRE${func}"
        fi

        einfo "Running ${count} iterations of ${func##BENCH_}." |& tee -a ${RESULTS_FILE}
        initial=$(timestamp)
        for (( i = 0 ; i < ${count} ; i++ ));  do
            "${func}"
        done
        final=$(timestamp)

        einfos "$(( final - initial ))ms" |& tee -a ${RESULTS_FILE}

        # Run a teardown function that can prepare for this benchmark without being included in the total time.
        if declare -f "POST${func}" &>/dev/null ; then
            "POST${func}"
        fi
    )

done

ebanner "Results"
cat ${RESULTS_FILE}

