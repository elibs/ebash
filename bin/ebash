#!/bin/sh
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

#-----------------------------------------------------------------------------------------------------------------------
#
# PRE-POSIX BASH SETUP
#
#-----------------------------------------------------------------------------------------------------------------------

# WARNING: This section of code must use POSIX compliant shell code only. This is because this section is designed to
# bootstrap ebash itself and install any dependencies (including bash!). So do not use bash extensions in this block
# of code.
: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}

# Perform pre-ebash option parsing. This code must be done separately and before we invoke opt_parse.
#
# All functions and ebash based scripts which utilize `opt_parse` get automatic documentation and usage information.
# This is automatically available via `--help` or `-?` options. For this to work, we have to store off the docstrings
# above each function into variables for subsequent output when the usage is requested via `--help` or `-?`.
#
# But we don't want to bloat the interpreter with a bunch of documentation every time we source ebash. Our solution is
# to only save them at times where we believe the variables are going to be needed. There's no reason to expect they
# will be necessary unless `--help` or `-?` is on the command line somewhere. Or for those few cases where it's needed,
# for any other reason, the caller can just set `__EBASH_SAVE_DOC=1` explicitly.
for arg in "$@" ; do

    case "${arg}" in

        --help|-?)
            __EBASH_SAVE_DOC=1
            ;;

        --install-*)
            exec "${EBASH_HOME}/install/$(echo "${arg}" | sed -e 's/--install-//')"
            ;;
    esac
done

#-----------------------------------------------------------------------------------------------------------------------
#
# USAGE / OPTIONS
#
#-----------------------------------------------------------------------------------------------------------------------

source ${EBASH}/ebash.sh || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

opt_usage ebash <<'END'
ebash is an open source project developed at NetApp/SolidFire as an open source project from 2011-2018 under the name
bashutils and the Apache 2.0 License. I forked bashutils into ebash upon my departure from NetApp/SolidFire to continue
active development and ensure it remained free and open source.

The primary goal of ebash is to significantly enhance bash code and make it more robust, feature rich and simple which
greatly accelerates developer productivity.

Because bash is a lower level language, it lacks some of the features and more advanced data structures typically found
in higher level languages. ebash aims to be the answer to this problem. The most important and compelling feature of
ebash is implicit error detection. This typically results in bash scripts being 75% shorter due to removal of explicit
error handling and the ability to leverage extensive ebash modules.

The ebash script itself is the primary entry point into ebash. It supports various modes of operation as outlined in
[usage](doc/usage.md):

- Sourcing. You can use ebash code in your bash script by adding the following to the top of your script. This assumes
  you have `ebash` in `${PATH}`. For example: `$(ebash --source)`

- Interpreter. Another very simple approach is to have ebash in your `${PATH}` and then simply change the interpreter
  at the top of your shell script to find `ebash` using `env`. For example: `#!/usr/bin/env ebash`

- Interactive ebash. One of the cool things ebash provides is an interactive REPL interface. This makes it super easy to
  interactively test out code to see how it behaves or debug failures. Simply invoke `ebash` and you'll be presented a
  prompt that you can use to run commands in.

- ebash binaries. Ebash provides multiple [binaries](https://elibs.github.io/ebash/binaries) which are essentially just
  scripts which magically invoke functions of the same name within ebash. Each of these binaries is really just a symlink
  to ebash itself. These work similarly to `busybox` in that if you invoke one of these symlinks, then `ebash` will look
  for a function matching the name of the binary. If it finds one, it will call it with the options and arguments passed
  in. This makes it easy to write modular, functional code and still expose it as a callable binary.

See also: [Ebash Documentation](https://elibs.github.io/ebash/index.html).
END

# Canonicalize EBASH_HOME and EBASH _after_ sourcing ebash because it makes sure readlink behaves the same for both mac
# and linux
EBASH=$(readlink -f "${EBASH}")
EBASH_HOME=$(readlink -f "${EBASH_HOME}")

# If we were called as "ebash", then the caller can specify options to this script.
declare name=${0##*/}
if [[ ${name} == "ebash" ]] ; then

    $(opt_parse \
        "+install_all                           | Install all ebash dependencies normally installed via --install-depends,
                                                  --install-recommends, and --install-extra. This installs everything
                                                  that ebash could every possibly need including required, recommended,
                                                  and extra dependencies."                                             \
        "+install_depends                       | Install a minimal set of dependencies that ebash requires in order to
                                                  work properly. This uses the install/depends script and works on all
                                                  OS and distributions that ebash officially supports as documented at
                                                  https://elibs.github.io/ebash/compatibility.html."                   \
        "+install_recommends                    | Install recommended packages that ebash uses in some of its optional
                                                  modules. These packages are not required by ebash but recommended to
                                                  take full advantage of all the ebash modules (most notable archive).
                                                  If ebash code fails due to a command not being found, then this is a
                                                  good next step."                                                     \
        "+install_extra                         | Install extra packages not required by core ebash or its modules. This
                                                  is generally used by ebash's CI/CD infrastructure or for bootstrapping
                                                  ebash installations and is not normally required or suggested."      \
        ":load l                                | ebash should source the specified file before attempting to run the
                                                  specified command." \
        "+source s                              | Print commands that would load ebash from its existing location on
                                                  disk into the current shell and then exit. You'd use this in a script
                                                  like this: \$(ebash --source)" \
        "+print_environment printenv p          | Dump environment variables that ebash would like to use in a format
                                                  bash can interpret" \
        ":name n=${0##*/}                       | Name to use as a starting point for finding functions. This basically
                                                  pretends that ebash is running with the specified name." \
        "+color c=$(efuncs_color_as_bool)       | Force explicit color mode." \
        ":msg_prefix m                          | Prefix to use for all emsg messages." \
        "+interactive i=$(einteractive_as_bool) | Force interactive mode even if we are not attached to a terminal.")

    if [[ -n ${load} ]] ; then
        source "${load}"
    fi

    # Setup ebash environment variables
    export EFUNCS_COLOR EMSG_PREFIX EINTERACTIVE
    EFUNCS_COLOR="${color}"
    EMSG_PREFIX=$(string_trim "${EMSG_PREFIX} ${msg_prefix}")
    EINTERACTIVE="${interactive}"

    if [[ ${source} -eq 1 ]] ; then
        export_string="$(declare -p EBASH EBASH_HOME EFUNCS_COLOR EMSG_PREFIX EINTERACTIVE | sed -e 's|declare -[-x] ||' | tr '\n' ' ')"
        echo "eval export ${export_string}; source \"${EBASH}/ebash.sh\" || { echo \"Unable to source ${EBASH}/ebash.sh\" ; exit 1 ; }"
        exit 0
    elif [[ ${print_environment} -eq 1 ]] ; then
        printf "export EBASH=%q\n" "${EBASH}"
        printf "export EBASH_HOME=%q\n" "${EBASH_HOME}"
        exit 0
    fi
fi

#-----------------------------------------------------------------------------------------------------------------------
#
# EBASH FUNCTION
#
#-----------------------------------------------------------------------------------------------------------------------

if [[ "${name}" != "ebash" ]] ; then

    # If there's a function in the group with the specified command name call it
    if [[ -n ${1:-} ]] && declare -f "${name}_${1}" &>/dev/null ; then
        quote_eval "${name}_${1}" "${@:2}"

    # Allow the name to have '-' instead of '_' so that the binary can be called 'module-action' and it will call the
    # 'module_action'
    elif [[ -n ${1:-} ]] && declare -f "${name//-/_}" &>/dev/null ; then
        quote_eval "${name//-/_}" "${@:1}"

    # Otherwise assume the called name is also the name of a ebash function and pass everything as arguments to it.
    else
        quote_eval "${name}" "${@:1}"
    fi

#-----------------------------------------------------------------------------------------------------------------------
#
# EBASH INTERPRETER or REPL
#
#-----------------------------------------------------------------------------------------------------------------------

else

    # Use all arguments to ebash as a command to execute
    if [[ ${#@} -gt 0 ]] ; then

        # ebash shebang interpreter.
        #
        # If our first argument is ANOTHER BASH script then we've been invoked as an interpreter and we need to actually
        # execute the other script we were given along with any of its arguments.
        #
        # The tricky part here is we don't want to simply execute the script, but instead we want to run it within our
        # existing ebash context. This way the called script inherits all the benefits of ebash without having to do
        # anything tricky in their script other than simply using the ebash shebang.
        #
        # Originally we copied the script we were given into a temporary directory and then modified it to source the
        # ebash environment at the top of the script. That had several undesirable side-effects:
        #
        # 1) Required file operations just to run a script
        # 2) Extra overhead of fork/exec to run the external script.
        # 3) Error prone to be running sed commands on arbitrary script contents
        # 4) Alters the called script's ${BASH_SOURCE} such that it looked like the script path is /tmp/blahXXXX rather
        #    than the actual location of the script. This is really bad since the caller may want to have access to
        #    files relative to it's source directory.
        #
        # So, a much simpler, and more correct solution is to simply SOURCE the external script (along with arguments).
        # This has the same effect as executing a script only it is run within our existing process context rather than
        # as an external script.
        if file "${1}" 2>/dev/null | grep -Pq "(ASCII text|bash script|Bourne-Again shell script)"; then
            source "${@}"
            exit $?
        fi

        # Run the command, but pretend to be inside a try so that die doesn't print an ugly stack trace.
        quote_eval "${@}"

    # Or run ebash-repl if nothing was specified
    else
        exec ${EBASH_HOME}/bin/ebash-repl --load "${load}"
    fi

fi
