#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

#
# This tool is designed to run individual commands in a ebash environment.
# It can effectively turns ebash functions into commands that can easily be
# run from a shell prompt.
#
# The first simple use case happens when the binary is called "ebash".  In
# this mode, everything after ebash on the command line is evaluated inside
# a bash interpreter that has sourced the various ebash source files.
#
# But ebash can be symlinked to other names.  ebash pays attention to
# the name that it is called by.  When it's not called as ebash, it tries
# to run ebash functions intead.  First, it looks to see if the symlink
# name is the name of a "namespace" of ebash commands.  For instance, the
# string commands can be used in this way.  Assuming a "string" symlink, then
#
#     string trim " a string to trim "
#
# will call the string_trim function, passing it that string as an argument.
# If there is no function that's a combination of the symlink name and the
# first argument, then ebash will look for a function of the same name as
# the symlink and call it passing all arguments to the function.  For instance,
# given a symlink called eunmount, then you could call
#
#     eunmount /path/to/unmount /another/path
#
# And both "/path/to/unmount" and "/another/path" will be passed as arguments
# to eunmount.
#
#-------------------------------------------------------------------------------


# To be able to make good use of function documentation in places where we do
# something like this, we need to save function documentation off into
# variables (or else we'd have to parse bash source code enough to extract it,
# which sounds very error prone)
#
#     somefunc --help
#
# But we don't want to bloat the interpreter with a bunch of documentation
# every time we source ebash.  Our solution is to only save them at times
# where we believe the variables are going to be needed.  There's no reason to
# expect they will be necessary unless `--help` is on the command line
# somewhere.  Or for those few cases where it's needed, they can set this
# variable, too.
#
# And for this to work in all of the ebash files, we must do it before
# sourcing them.
__EBASH_SAVE_DOC=0
for arg in "$@" ; do
    if [[ ${arg} == "--help" ]] ; then
        __EBASH_SAVE_DOC=1
    fi
done


: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}
source ${EBASH}/ebash.sh || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

# Canonicalize EBASH_HOME and EBASH _after_ sourcing ebash because it makes sure readlink behaves the same for
# both mac and linux
EBASH=$(readlink -f "${EBASH}")
EBASH_HOME=$(readlink -f "${EBASH_HOME}")


declare name=${0##*/}

# If we were called as "ebash", then the caller can specify options to this script.
if [[ ${name} == "ebash" ]] ; then

    $(opt_parse \
        ":load l          | ebash should source the specified file before attempting to run the specified command." \
        "+source s        | Print commands that would load ebash from its existing location on disk into the current
                            shell and then exit.  You'd use this in a script like this: \$(ebash --source)" \
        "+print_environment printenv p | Dump environment variables that ebash would like to use in a format bash
                            can interpret" \
        ":name n=${0##*/} | Name to use as a starting point for finding functions.  I.e pretend ebash is running
                            with the specified name.")

    if [[ -n ${load} ]] ; then
        source "${load}"
    fi

    if [[ ${source} -eq 1 ]] ; then
        echo "eval export EBASH=${EBASH} EBASH_HOME=${EBASH_HOME} ; source \"${EBASH}/ebash.sh\" || { echo \"Unable to source ${EBASH}/ebash.sh\" ; exit 1 ; }"
        exit 0
    elif [[ ${print_environment} -eq 1 ]] ; then
        printf "export EBASH=%q\n" "${EBASH}"
        printf "export EBASH_HOME=%q\n" "${EBASH_HOME}"
        exit 0
    fi
fi

# If not called as ebash...
if [[ "${name}" != "ebash" ]] ; then

    # If there's a function in the group with the specified command name call it
    if [[ -n ${1:-} ]] && declare -f "${name}_${1}" &>/dev/null ; then

        quote_eval "${name}_${1}" "${@:2}"

    # Otherwise assume the called name is also the name of a ebash function and pass everything as arguments to it.
    else
        quote_eval "${name}" "${@:1}"
    fi

# However, if called as ebash...
else

    # Use all arguments to ebash as a command to execute
    if [[ ${#@} -gt 0 ]] ; then

        # If we were given the path to another script run it inside ebash environment
        if [[ ${#@} -ge 1 && -e "${1}" ]]; then

            # Copy provided script over to a temporary file that we'll set a trap to delete later
            SOURCE="${1}"; shift
            SCRIPT=$(mktemp --tmpdir ebash-script-XXXXXX)
            trap_add "rm -f ${SCRIPT}"
            cp "${SOURCE}" "${SCRIPT}"

            (
                # Disable fatal error handling as that will be handled by the actual script we invoke which
                # will run in ebash environment. It's not our responsibility at this point.
                nodie_on_abort
                nodie_on_error

                # Replace shebang with EBASH environment.
				read -r -d '' EBASH_PREAMBLE <<-EOF
				#!/usr/bin/env bash
				export EBASH_HOME="${EBASH_HOME}"
				export EBASH="${EBASH}"
				export __EBASH_SAVE_DOC=${__EBASH_SAVE_DOC}
				source "${EBASH}/ebash.sh" || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }
				EOF
                sed -i -e "s%^#!.*%${EBASH_PREAMBLE//$'\n'/\\n}%" "${SCRIPT}"

                # Execute the new script with any arguments passed along
                chmod +x "${SCRIPT}"
                exec "${SCRIPT}" ${@:-}
            )

            exit 0
        fi

        # Run the command, but pretend to be inside a try so that die doesn't print an ugly stack trace.
        quote_eval "${@}"

    # Or run ebash-repl if nothing was specified
    else
        exec ${EBASH_HOME}/bin/ebash-repl --load "${load}"
    fi

fi
