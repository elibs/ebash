#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# Test-only PGP files
ETEST_PGP_PUBLIC="${EBASH_HOME}/tests/etest_pgp_public.asc"
ETEST_PGP_PRIVATE="${EBASH_HOME}/tests/etest_pgp_private.asc"
ETEST_PGP_PHRASE="${EBASH_HOME}/tests/etest_pgp_phrase.txt"

ETEST_efetch_md5_bogus()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    touch ${tmpfile}.md5

    # efetch should fail b/c this isn't a valid MD5 file
    assert_false efetch -m file://${tmpfile}
}

ETEST_efetch_md5()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1
    emd5sum ${tmpfile} > ${tmpfile}.md5

    efetch -m file://${tmpfile} copy.txt
    assert_exists copy.txt copy.txt.md5
    assert_not_exists copy.txt.progress copy.txt.md5.progress
    diff ${tmpfile} copy.txt

    # The md5 file we downloaded should NOT equal the original since the file name was updated in-place But if we strip
    # out the file name, they should be the same.
    assert_false diff "${tmpfile}.md5" copy.txt.md5
    diff <( echo "$(awk '{print $1}' ${tmpfile}.md5)" ) <( echo "$(awk '{print $1}' copy.txt.md5)" )
    emd5sum_check copy.txt
}

ETEST_efetch_md5_missing_md5()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1

    # efetch should fail and both files should get removed
    assert_false efetch -m file://${tmpfile} copy.txt
    assert_not_exists copy.txt copy.txt.md5
}

ETEST_efetch_md5_missing_file()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-md5-XXXXXX)

    # efetch should fail and both files should get removed
    assert_false efetch -m file://${tmpfile%%.md5} copy.txt
    assert_not_exists copy.txt copy.txt.md5
}

ETEST_efetch_meta()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1
    emetadata ${tmpfile} > ${tmpfile}.meta
    emetadata_check ${tmpfile}

    efetch -M file://${tmpfile} copy.txt
    assert_exists copy.txt copy.txt.meta
    assert_not_exists copy.txt.progress copy.txt.meta.progress
    diff ${tmpfile} copy.txt

    emetadata_check copy.txt
}

ETEST_efetch_meta_pgp()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1
    emetadata -p="${ETEST_PGP_PRIVATE}" -k="$(cat ${ETEST_PGP_PHRASE})" ${tmpfile} > ${tmpfile}.meta
    emetadata_check ${tmpfile}

    efetch --meta --public-key "${ETEST_PGP_PUBLIC}" file://${tmpfile} copy.txt
    assert_exists copy.txt copy.txt.meta
    assert_not_exists copy.txt.progress copy.txt.meta.progress
    diff ${tmpfile} copy.txt

    emetadata_check -p="${ETEST_PGP_PUBLIC}" copy.txt
}

# efetch without --meta or --md5 shouldn't remove existing .meta or .md5 files when it fails.
ETEST_efetch_fail_preserves_meta()
{
    local test_file="output.txt"
    touch "${test_file}.meta"
    touch "${test_file}.md5"
    try
    {
        efetch "http://test" "${test_file}"
    }
    catch
    {
        assert_not_exists "${test_file}" "${test_file}.progress"
        assert_exists "${test_file}.meta"
        assert_exists "${test_file}.md5"
        return 0
    }
    die "efetch should have failed"
}

# Older curl versions wrongly refused to create an empty file even if an empty file was successfully fetched. This test
# verifies efetch works around this dumb bug. See: https://github.com/curl/curl/issues/183
ETEST_efetch_empty_file()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    assert_not_exists "dest"
    [[ ! -s "${tmpfile}" ]] || die "$(lval tmpfile) should be an empty file"

    # Try to fetch empty file. It should be created and be empty.
    efetch file://${tmpfile} "output.txt"
    assert_exists "output.txt"
    assert_not_exists "output.txt.progress"
    [[ ! -s "output.txt" ]] || die "output.txt should be an empty file."
}

ETEST_efetch_missing_dir()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1
    assert_not_exists "dest"

    # Try to fetch it to a non-existent directory. Unlike before, it should blow up if the directory doesn't exist
    # otherwise we can't easily implement fetching multiple files.
    assert_false efetch file://${tmpfile} "dest/sub1/sub2/file1.txt"
    assert_not_exists "dest"
}

ETEST_efetch_fail_curl()
{
    # Try to fetch file and force failure to verify the destination file does not exist
    curl()
    {
        # Grab the destination parameter from the curl command in efetch
	    local dst
        dst=$(echo $* | grep -Po -- '--output \K\S+')
	    touch "${dst}"
	    return 1
    }

    try
    {
        efetch "http://test" output.txt
        die "We should have caught an exception here"
    }
    catch
    {
        assert_not_exists output.txt
	    assert_not_exists output.txt.pending
    }
}

ETEST_efetch_none()
{
    assert_false efetch
}

ETEST_efetch_single_file_no_dest()
{
    local tmpfile
    tmpfile=$(mktemp --tmpdir etest-efetch-XXXXXX)
    dd if=/dev/urandom of=${tmpfile} bs=1K count=1
    mkdir output
    TMPDIR=output

    efetch "file://${tmpfile}"
    assert_exists output/$(basename ${tmpfile})
    assert_not_exists output/$(basename ${tmpfile}).progress
}

ETEST_efetch_multiple_urls()
{
    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    efetch "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output"
    assert_exists output/file1 output/file2 output/file3
    assert_not_exists output/file1.progress output/file2.progress output/file3.progress

    diff file1 output/file1
    diff file2 output/file2
    diff file3 output/file3
}

# Do not allow fetching multiple files to a file
ETEST_efetch_multiple_to_file_fails()
{
    assert_not_exists output
    touch output
    [[ -f output ]]

    assert_false efetch "file://file1" "file://file2" "file://file3" output
}

# Verify we can background efetch and send all output to a file and then use efetch_wait to wait for it to complete
ETEST_efetch_wait()
{
    # we set EINTERACTIVE to 1 here because if we just detect it, it will be 0 because of the etest redirection and this
    # test will fail because there will be no output
    local EINTERACTIVE=1

    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    local stdout
    stdout=$(
        efetch --output output.txt "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
        efetch_wait $!
    )

    assert_exists output.txt
    assert_not_exists output.txt.progress
    assert_empty "${stdout}"
    assert_exists output/file1 output/file2 output/file3
    assert_not_exists output/file1.progress output/file2.progress output/file3.progress
    diff file1 output/file1
    diff file2 output/file2
    diff file3 output/file3

    # Verify output.txt file has what we expect.
    grep "file1.*#* 100.0%" output.txt
    grep "file2.*#* 100.0%" output.txt
    grep "file3.*#* 100.0%" output.txt
}

# Verify we can background efetch and send all output to a file and tail the output when we wait.
ETEST_efetch_wait_tail_no_delete()
{
    # we set EINTERACTIVE to 1 here because if we just detect it, it will be 0 because of the etest redirection and this
    # test will fail because there will be no output
    local EINTERACTIVE=1

    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    efetch --output output.txt "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
    local pid=$!

    local stdout
    stdout=$(efetch_wait --tail output.txt --no-delete-output ${pid})
    echo "${stdout}"
    assert process_not_running "${pid}"

    assert_exists output.txt output/file1 output/file2 output/file3
    assert_not_exists output.txt.progress output/file1.progress output/file2.progress output/file3.progress
    diff file1 output/file1
    diff file2 output/file2
    diff file3 output/file3

    assert_match "${stdout}" "file1.*#* 100.0%"
    assert_match "${stdout}" "file2.*#* 100.0%"
    assert_match "${stdout}" "file3.*#* 100.0%"
}

ETEST_efetch_wait_tail_delete()
{
    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    efetch --output output.txt "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
    local pid=$!

    local stdout
    stdout=$(efetch_wait --tail output.txt ${pid})
    echo "${stdout}"
    assert process_not_running "${pid}"

    assert_not_exists output.txt
    assert_exists output/file1 output/file2 output/file3
    assert_not_exists output/file1.progress output/file2.progress output/file3.progress

    diff file1 output/file1
    diff file2 output/file2
    diff file3 output/file3
}

ETEST_efetch_wait_quiet()
{
    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    local stdout
    stdout=$(
        efetch --quiet "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
        efetch_wait $!
    )

    assert_empty "${stdout}"

    assert_exists output/file1 output/file2 output/file3
    assert_not_exists output/file1.progress output/file2.progress output/file3.progress

    diff file1 output/file1
    diff file2 output/file2
    diff file3 output/file3
}

ETEST_efetch_wait_quiet_progress()
{
    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    efetch --quiet "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
    local pid=$!
    local output
    output=$(efetch_wait --progress ${pid} 2>&1)
    echo "${output}"
    assert_match "${output}" "Waiting for efetch $(lval pid) to complete.*00:00:"
}

ETEST_efetch_wait_quiet_progress_disabled()
{
    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    efetch --quiet "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output" &
    local pid=$!
    local output
    output=$(EPROGRESS=0 efetch_wait --progress ${pid} 2>&1)
    echo "${output}"
    assert_match "${output}" "Waiting for efetch $(lval pid) to complete"
    assert_not_match "${output}" "Waiting for efetch $(lval pid) to complete.*00:00:"
}

ETEST_efetch_wait_quiet_tty_restored()
{
    # PE-4147 - efetch --quiet was redirecting stdout/stderr to /dev/null and not restoring it after the call was done.

    dd if=/dev/urandom of=file1 bs=1K count=1
    dd if=/dev/urandom of=file2 bs=1K count=1
    dd if=/dev/urandom of=file3 bs=1K count=1
    mkdir output

    local output
    output="$(efetch --quiet "file://${PWD}/file1" "file://${PWD}/file2" "file://${PWD}/file3" "output"; echo "text")"

    assert_eq "text" "${output}"
}
