#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

ETEST_conf_basic()
{
    e_a="val1"
    e_b="https://en.wikipedia.org/wiki/INI_file"
    e_c="something   with internal whitespace"
    e_d="value containing apostophe (say it ain't so)"
    e_e='value containing "double quotes"'

	cat >file <<-END
	[section_a]
	a=${e_a}
	#a=3
	 b = ${e_b}
	;b=2
	c = ${e_c}
	d = ${e_d}
	e = ${e_e}


	[section_b]
	c=1
	END

    etestmsg "Configuration contents"
    cat file

    etestmsg "Reading configuration"
    declare -A CONF
    conf_read CONF file

    einfo "$(lval %CONF[section_a] %CONF[section_b])"
    assert_eq "${e_a}" "$(pack_get CONF[section_a] a)"
    assert_eq "${e_a}" "$(conf_get CONF section_a.a)"

    assert_eq "${e_b}" "$(pack_get CONF[section_a] b)"
    assert_eq "${e_b}" "$(conf_get CONF section_a.b)"

    assert_eq "${e_c}" "$(pack_get CONF[section_a] c)"
    assert_eq "${e_c}" "$(conf_get CONF section_a.c)"

    assert_eq "${e_d}" "$(pack_get CONF[section_a] d)"
    assert_eq "${e_d}" "$(conf_get CONF section_a.d)"

    assert_eq "${e_e}" "$(pack_get CONF[section_a] e)"
    assert_eq "${e_e}" "$(conf_get CONF section_a.e)"

    assert_eq "1" "$(pack_get CONF[section_b] c)"
    assert_eq "1" "$(conf_get CONF section_b.c)"
}

ETEST_conf_value_quotes()
{
    expected=" a b c "

	cat > file <<-END
	[s]
	a="${expected}"
	b='${expected}'
	END

    declare -A CONF_QUOTES
    conf_read CONF_QUOTES file

    einfo "$(lval %CONF_QUOTES[s])"
    assert_eq "${expected}" "$(pack_get CONF_QUOTES[s] a)"
    assert_eq "${expected}" "$(pack_get CONF_QUOTES[s] b)"
}

ETEST_conf_default_section()
{
    echo "a=1" >file
    declare -A CONF
    conf_read CONF file

    assert_eq "1" "$(pack_get CONF[default] a)"
}

ETEST_conf_checks_quotes()
{
    echo 'a="""' >file
    declare -A CONF
    assert_false conf_read CONF file

    echo "b='''" >file
    assert_false conf_read CONF file
}

ETEST_conf_section_name_whitespace()
{
	cat >file <<-END
	[section whitespace]
	a=2
	END

    declare -A CONF
    conf_read CONF file
    assert_eq "2" "$(pack_get CONF["section whitespace"] a)"
}

ETEST_conf_set()
{
	cat >file <<-END
	# COMMENT1
	[section_x]
	# COMMENT2
	a = 1
	# COMMENT3
	b = 2

	[section_y]
	a = 10
	b = 20
	END

    etestmsg "Initial file"
    cat file

    local line_count
    line_count=$(wc -l < file)

    declare -A CONF
    conf_read CONF file

    assert_eq "1" "$(pack_get CONF[section_x] a)"
    assert_eq "2" "$(pack_get CONF[section_x] b)"
    assert_eq "10" "$(pack_get CONF[section_y] a)"
    assert_eq "20" "$(pack_get CONF[section_y] b)"


    etestmsg "One modification"
    conf_set --file file section_x.a 11
    cat file

    unset CONF ; declare -A CONF
    conf_read CONF file
    assert_eq "11" "$(pack_get CONF[section_x] a)"
    assert_eq "2"  "$(pack_get CONF[section_x] b)"
    assert_eq "10" "$(pack_get CONF[section_y] a)"
    assert_eq "20" "$(pack_get CONF[section_y] b)"
    # No change in number of lines
    assert_eq "${line_count}" $(wc -l < file)


    etestmsg "Two mods"
    conf_set --file file section_y.a 22

    unset CONF ; declare -A CONF
    conf_read CONF file
    assert_eq "11" "$(pack_get CONF[section_x] a)"
    assert_eq "2"  "$(pack_get CONF[section_x] b)"
    assert_eq "22" "$(pack_get CONF[section_y] a)"
    assert_eq "20" "$(pack_get CONF[section_y] b)"
    # No change in number of lines
    assert_eq "${line_count}" $(wc -l < file)


    etestmsg "Three mods"
    conf_set --file file section_z.a 7

    unset CONF ; declare -A CONF
    conf_read CONF file
    assert_eq "11" "$(pack_get CONF[section_x] a)"
    assert_eq "2"  "$(pack_get CONF[section_x] b)"
    assert_eq "22" "$(pack_get CONF[section_y] a)"
    assert_eq "20" "$(pack_get CONF[section_y] b)"
    assert_eq "7"  "$(pack_get CONF[section_z] a)"
    # This one did change the number of lines


    # Make sure all comments made it through
    grep -q COMMENT1 file
    grep -q COMMENT2 file
    grep -q COMMENT3 file

    etestmsg "Setting compact value"
    conf_set --file file --compact section_z.b 42
    cat file
    grep -q "[section_z]"$'\n'"a = 7" file
    grep -q "[section_z]"$'\n'"b=42"  file
}

ETEST_conf_empty_file()
{
    >file

    etestmsg "Reading an empty file"
    declare -A CONF
    conf_read CONF file
    assert_eq "0" $(array_size CONF)

    etestmsg "Setting value in an empty file."
    conf_set --file file a.b 1
    local contents
    contents="$(cat file)"
    assert_eq "[a]"$'\n'"b = 1" "${contents}"

    conf_read CONF file
    assert_eq "1" $(array_size CONF)

    # Make sure the file contains all the relevant stuff now
    grep -q a file
    grep -q b file
    grep -q 1 file
}

ETEST_conf_set_default()
{
    etestmsg "Try on an empty file"
    >file
    conf_set --file file a 1

    cat file
    grep -q a file
    grep -q 1 file
    assert_false grep default file


    etestmsg "Try a file that has a section named default"
    echo "[default]" >file
    conf_set --file file a 1
    cat file
    grep -q a file
    grep -q 1 file
    grep -q default file
}

ETEST_conf_dump_circle()
{
	cat >file <<-END
	[section_a]
	a = 1
	b = 2

	[section_b]
	a = 300
	b = 400
	c = 10

	END

    declare -A MYCONF
    conf_read MYCONF file
    declare -p MYCONF

    conf_dump MYCONF > other_file

    assert_eq --hexdump "$(cat file)" "$(cat other_file)"
}

ETEST_conf_props()
{
    cat >file <<-END
	global = 1

	[section_a]
	a = 1
	b = 2

	[section_b]
	a = 300
	b = 400
	c = 10
	END

    etestmsg "Input"
    cat file

    declare -A CONF
    conf_read CONF file

	assert_eq "global" "$(conf_props CONF default   | tr '\n' ' ' | sed 's| $||')"
    assert_eq "a b"    "$(conf_props CONF section_a | tr '\n' ' ' | sed 's| $||')"
    assert_eq "a b c"  "$(conf_props CONF section_b | tr '\n' ' ' | sed 's| $||')"
}

ETEST_conf_contains()
{
	cat >file <<-END
	[section_a]
	a = 1
	b = 2

	[section_b]
	a = 300
	b = 400
	c = 10
	END

    etestmsg "Before removal"
    cat file

    declare -A CONF
    conf_read CONF file
    assert_eq "2" "$(pack_size CONF[section_a])"
    assert_eq "3" "$(pack_size CONF[section_b])"
    conf_contains CONF section_a.a
    conf_contains CONF section_b.a

    conf_set --file file --unset section_a.a
    conf_set --file file --unset section_b.a

    etestmsg "Contents after removal"
    cat file

    # Re-read after the items have been removed
    declare -A CONF_REMOVED
    conf_read CONF_REMOVED file
    assert_eq "1" "$(pack_size CONF_REMOVED[section_a])"
    assert_eq "2" "$(pack_size CONF_REMOVED[section_b])"
    assert_false conf_contains CONF_REMOVED section_a.a
    assert_false conf_contains CONF_REMOVED section_b.a
}

ETEST_conf_sections()
{
	cat >file <<-END
	[section_x]
	a = 1
	b = 2

	[section_z]
	a = 100

	[section_y]
	a = 10
	b = 20
	END

    etestmsg "Initial file"
    cat file

    etestmsg "Dump"
    declare -A CONF
    conf_read CONF file
    conf_dump CONF

    etestmsg "Sections (should be sorted)"
    conf_sections CONF
    assert_eq "section_x section_y section_z" "$(conf_sections CONF)"
}
