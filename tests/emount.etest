#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

[[ ${__EBASH_OS} == Linux ]] || return 0

check_mounts()
{
    $(opt_parse path count)

    [[ ${count} -eq 0 ]] && assert_false emounted ${path} || assert_true emounted ${path}
    assert_eq ${count} $(emount_count ${path})
}

ETEST_emount_bind()
{
    mkdir src
    touch src/file
    echo "Love" > src/file

    # Bind mount and verify mounted and verify content
    mkdir dst
    ebindmount src dst
    trap_add "eunmount dst"
    assert_true emounted dst
    assert_true diff src/file dst/file
}

ETEST_emount_unmount()
{
    # Bind mount src to dst
    mkdir src dst
    ebindmount src dst
    trap_add "eunmount dst"

    # Verify mounted, unmount, then verify unmounted
    assert_true  emounted dst
    assert_false emounted src
}

ETEST_emount_unmount_recursive()
{
    etestmsg "Bind mounting src1 and src2"
    mkdir -p src1 src2 dst/dst1 dst/dst2
    ebindmount src1 dst/dst1
    ebindmount src2 dst/dst2
    trap_add "eunmount dst/dst1 dst/dst2"

    etestmsg "Validating mounts"
    assert_false emounted dst
    assert_true  emounted dst/dst1
    assert_true  emounted dst/dst2

    etestmsg "Ensure eunmount does nothing without -r flag"
    local mounts_before=() mounts_after=()
    mounts_before=( $(efindmnt "${TEST_DIR_OUTPUT}") )
    einfo "Mounts before unmount"
    echo "${mounts_before[@]}"
    eunmount dst
    einfo "Mounts after unmount"
    mounts_after=( $(efindmnt "${TEST_DIR_OUTPUT}") )
    echo "${mounts_after[@]}"
    assert_eq "$(array_join mounts_before :)" "$(array_join mounts_after :)"

    etestmsg "Recursively unmounting dst"
    einfo "Mounts before unmount"
    list_mounts | grep "${TEST_DIR_OUTPUT}" || true
    eunmount --recursive dst
    einfo "Mounts after unmount"
    list_mounts | grep "${TEST_DIR_OUTPUT}" || true

    etestmsg "Validating mounts"
    assert_false emounted dst/dst1
    assert_false emounted dst/dst2
}

ETEST_emount_partial_match()
{
    # Bind mount a couple of nested directories
    mkdir -p src1 src2 dst/dst1 dst/dst2
    ebindmount src1 dst/dst1
    ebindmount src2 dst/dst2
    trap_add "eunmount dst/dst1 dst/dst2"

    # Verify state
    assert_false emounted dst
    assert_true  emounted dst/dst1
    assert_true  emounted dst/dst2

    # Use a partial match -- should NOT find any mounts
    assert_false emounted dst/d
}

# Verify "eunmount -v" enables verbose output.
ETEST_eunmount_verbose()
{
    mkdir src dest
    ebindmount src dest
    trap_add "eunmount dest"

    local output
    output=$(EFUNCS_COLOR=0 eunmount -v dest 2>&1)
    assert_match "${output}" "Unmounting dest"
}

# Verify eunmount -d behavior
ETEST_eunmount_delete()
{
    etestmsg "Creating non-empty directory"
    mkdir -p dest
    touch dest/{1,2,3}

    etestmsg "Verifying eunmount -d fails without -r flag"
    assert_false eunmount -d dest
    assert_exists dest

    etestmsg "Retest with -r flag"
    assert_true eunmount -r -d dest
    assert_not_exists dest
}

# Verify eunmount -a behavior
ETEST_eunmount_all()
{
    mkdir src dest

    etestmsg "Mounting src at dest many times"
    local nmounts=10
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        mkdir dest/${i}
        ebindmount src dest/${i}
        trap_add "eunmount dest/${i}"
    done

    # eunmount -a dest without -r should SUCCEED but do NOTHING since dest itself is not mounted.
    etestmsg "Verifying eunmount -a without -r does nothing"
    assert_true eunmount -a dest
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        assert_true emounted dest/${i}
    done

    # With -r it should succeed but nothing should get removed (no -d)
    etestmsg "Verifying eunmount -a -r succeeds"
    assert_true eunmount -a -r dest
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        assert_false emounted dest/${i}
        assert_exists dest/${i}
    done

    etestmsg "Verifying eunmount -a -d behavior"
    assert_true eunmount -a -r -d dest
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        assert_false emounted dest/${i}
        assert_not_exists dest/${i}
    done

    etestmsg "Mounting everything again"
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        mkdir -p dest/${i}
        ebindmount src dest/${i}
    done

    etestmsg "Verifying eunmount -a -r -d behavior"
    assert_true eunmount -a -r -d dest
    for (( i=0; i<${nmounts}; ++i )); do
        einfo "$(lval i)"
        assert_false emounted dest/${i}
        assert_not_exists dest/${i}
    done

    assert_not_exists dest
}

ETEST_ebindmount_into()
{
    etestmsg "Creating source directory"
    mkdir src1 src2 dest
    touch src1/{file1,file2,file3} src2/{file4,file5,file6}

    etestmsg "Bind Mounting src1 and src2 into dest"
    ebindmount_into dest src1 src2
    trap_add "eunmount --recursive --delete dest"

    etestmsg "Verifying contents"
    assert_directory_contents dest src1 src1/file1 src1/file2 src1/file3 src2 src2/file4 src2/file5 src2/file6
}

ETEST_ebindmount_into_contents()
{
    etestmsg "Creating source directory"
    mkdir src1 src2 dest
    touch src1/{file1,file2,file3} src2/{file4,file5,file6}

    etestmsg "Bind Mounting src1 and src2 into dest"
    ebindmount_into dest src1/. src2/.
    trap_add "eunmount --recursive --delete dest"

    etestmsg "Verifying contents"
    assert_directory_contents dest file1 file2 file3 file4 file5 file6
}

ETEST_ebindmount_into_contents_empty()
{
    etestmsg "Creating source directory"
    mkdir src dest

    etestmsg "Bind Mounting src (empty) into dest"
    ebindmount_into dest src/.

    etestmsg "Verifying contents"
    assert_directory_contents dest
}

ETEST_ebindmount_into_alternative_paths()
{
    etestmsg "Creating source directory"
    mkdir src1 src2 dest
    touch src1/{file1,file2,file3} src2/{file4,file5,file6}

    etestmsg "Bind Mounting src1 and src2 into dest"
    ebindmount_into dest src1:s1 src2:s2
    trap_add "eunmount --recursive --delete dest"

    etestmsg "Verifying contents"
    assert_directory_contents dest s1 s1/file1 s1/file2 s1/file3 s2 s2/file4 s2/file5 s2/file6
}

ETEST_ebindmount_into_shadow()
{
    etestmsg "Creating source directories"
    mkdir src1 dest
    touch src1/{file1,file2}
    echo "data1" >src1/file1
    echo "data2" >src1/file2

    mkdir src2
    echo "XXXX1" >src2/file1
    echo "XXXX2" >src2/file2

    etestmsg "Bind Mounting src1 and src2 into dest"
    ebindmount_into dest src1/. src2/.

    # Setup a trap to unmount and delete all the mounts beneath dest.
    # NOTE: We MUST use --all here since we are ->intentionally<- bind mounting multiple files with the same name.
    #       This causes there to be multiple copies of the same filename show up in /proc/mounts, e.g.:
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file2 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file1 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file2 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file1 ext4 rw,noatime,data=ordered 0 0
    trap_add "eunmount --all --recursive --delete dest"

    etestmsg "Validating contents"
    assert_directory_contents dest file1 file2

    etestmsg "Validating updated contents"
    assert_eq "XXXX1" "$(cat dest/file1)"
    assert_eq "XXXX2" "$(cat dest/file2)"
}

ETEST_ebindmount_into_shadow_recursive_merge()
{
    etestmsg "Creating source directories"
    mkdir -p src1/foo/bar/zap dest
    echo "src1" >src1/foo/alpha
    echo "src1" >src1/foo/file1
    echo "src1" >src1/foo/file2
    echo "src1" >src1/foo/bar/file1
    echo "src1" >src1/foo/bar/zap/file1

    mkdir -p src2/foo/bar/zap
    echo "src2" >src2/foo/file1
    echo "src2" >src2/foo/file2
    echo "src2" >src2/foo/bar/file1
    echo "src2" >src2/foo/bar/beta

    etestmsg "Bind Mounting src1 and src2 into dest"
    ebindmount_into dest src1/. src2/.

    # NOTE: We MUST use --all here since we are ->intentionally<- bind mounting multiple files with the same name.
    #       This causes there to be multiple copies of the same filename show up in /proc/mounts, e.g.:
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file2 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file1 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file2 ext4 rw,noatime,data=ordered 0 0
    # /dev/sda1 ETEST_ebindmount_into_shadow/dest/file1 ext4 rw,noatime,data=ordered 0 0
    trap_add "eunmount --all --recursive --delete dest"

    etestmsg "Validating contents"
    assert_directory_contents dest foo foo/alpha foo/file1 foo/file2 foo/bar foo/bar/file1 foo/bar/beta foo/bar/zap foo/bar/zap/file1

    etestmsg "Validating updated contents"
    assert_eq "src1" "$(cat dest/foo/alpha)"
    assert_eq "src1" "$(cat dest/foo/bar/zap/file1)"
    assert_eq "src2" "$(cat dest/foo/file1)"
    assert_eq "src2" "$(cat dest/foo/file2)"
    assert_eq "src2" "$(cat dest/foo/bar/file1)"
    assert_eq "src2" "$(cat dest/foo/bar/beta)"
}
