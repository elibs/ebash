#!/usr/bin/env bash
#
# Copyright 2021, Marshall McMullen <marshall.mcmullen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# Verify ansible_status happy path.
ETEST_ansible_status()
{
    failed="false"
    changed="true"
    msg="Ansible status test"

    output=$(ansible_status --failed "${failed}" --changed "${changed}" --msg "${msg}")

    assert_eq "{\"failed\": false, \"changed\": true, \"msg\": \"Ansible status test\"}" "${output}"
}

# Verify ansible_status with short parameters.
ETEST_ansible_status_short()
{
    failed="false"
    changed="true"
    msg="Ansible status test"

    output=$(ansible_status --f "${failed}" --c "${changed}" --m "${msg}")

    assert_eq "{\"failed\": false, \"changed\": true, \"msg\": \"Ansible status test\"}" "${output}"
}

# Verify failure when missing the required failed argument.
ETEST_ansible_status_missing_failed_arg()
{
    changed="true"
    msg="Ansible status test"

    try
    {
        $(ansible_status --changed "${changed}" --message "${msg}")

        die -r=243 "Should have failed parsing options."
    }
    catch
    {
        assert_ne 243 $?
    }
}

# Verify failure when missing the required changed argument.
ETEST_ansible_status_missing_changed_arg()
{
    failed="false"
    msg="Ansible status test"

    try
    {
        $(ansible_status --failed "${failed}" --message "${msg}")

        die -r=243 "Should have failed parsing options."
    }
    catch
    {
        assert_ne 243 $?
    }
}

# Verify failure when missing the required msg argument.
ETEST_ansible_status_missing_msg_arg()
{
    failed="false"
    changed="true"

    try
    {
        $(ansible_status --failed "${failed}" --changed "${changed}")

        die -r=243 "Should have failed parsing options."
    }
    catch
    {
        assert_ne 243 $?
    }
}
