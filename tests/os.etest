#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

ETEST_os()
{
    local os
    os=$(os)

    assert_false os "dummy" "dummy2"
    assert_true  os "dummy" "${os}" "dummy2"
    assert_true  os "dummy" "${os^^}" "dummy2"
    assert_true  os "dummy" "${os,,}" "dummy2"
}

ETEST_os_distro()
{
    if [[ ${__EBASH_OS} == "Linux" ]] ; then
        local distro
        distro=$(os_distro)

        assert_false os_distro MythicalDistro
        assert_true  os_distro "${distro}"
        assert_true  os_distro "${distro,,}"
        assert_true  os_distro "${distro^^}"
        assert_true  os_distro a b c "${distro^^}" e f g

    else
        etestmsg "Not on linux.  Shouldn't match any specific distro"
        assert_false os_distro SomeDistro

        etestmsg "But it should still be safe to call the function"
        local distro
        distro=$(os_distro)
        assert_var_empty distro
    fi
}

ETEST_os_release()
{
    local release
    release=$(os_release)

    assert_false os_release dummy1 dummy2
    assert_true  os_release dummy1 "${release}" dummy2
    assert_true  os_release dummy1 "${release^^}" dummy2
    assert_true  os_release dummy1 "${release,,}" dummy2

    # Pretend that this is ubuntu 16.04, whether it is or not
    os() { [[ ${1,,} == linux ]] && return 0 || return 1 ; }
    lsb_release() { echo "16.04" ; }
    assert command_exists lsb_release

    assert_eq 16.04 "$(os_release)"

    # Pretend that this is darwin 10.11, whether it is or not
    os() { [[ ${1,,} == darwin ]] && return 0 || return 1 ; }
    sw_vers() { echo "10.11.5" ; }

    assert_eq 10.11.5 "$(os_release)"
}

ETEST_os_nproc()
{
    local numproc
    numproc=$(nproc)
    etestmsg "$(lval numproc)"
    assert_num_gt ${numproc} 0
}
