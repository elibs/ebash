#!/usr/bin/env bash
#
# Copyright 2022, Marshall McMullen <marshall.mcmullen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

#-----------------------------------------------------------------------------------------------------------------------
#
# Setup
#
#-----------------------------------------------------------------------------------------------------------------------

MOCKS=(
    "efindmnt"
    "eunmount"
    "rm"
)

# Create a bunch of mocks for cgroup related functions.
setup()
{
    etestmsg "Creating $(lval MOCKS)"
    for mock in "${MOCKS[@]}"; do
        emock "${mock}"
    done

    trap_add "teardown"
}

teardown()
{
    etestmsg "Unmocking $(lval MOCKS)"
    for mock in "${MOCKS[@]}"; do
        eunmock "${mock}"
    done
}

# Verify if there are no mount leaks that assert_no_mount_leaks returns success. It should NOT try to unmount.
ETEST_mount_leaks()
{
    delete=0
    assert_no_mount_leaks

    assert_emock_called "efindmnt" 1
    assert_emock_called "eunmount" 0
    assert_emock_called "rm"       0
}

# Verify if there are no mount leaks that assert_no_mount_leaks returns success. It should NOT try to unmount. But it
# should delete the workdir.
ETEST_mount_leaks_with_delete()
{
    delete=1
    assert_no_mount_leaks

    assert_emock_called "efindmnt" 1
    assert_emock_called "eunmount" 0
    assert_emock_called "rm"       1

    etestmsg "Verifying rm was called on the workdir"
    assert_emock_called_with "rm" 0 \
        --recursive --force "${workdir}"
}

# Verify if there are mount leaks that we should try to unmount them and return an error.
ETEST_mount_leaks_with_leaks()
{
    emock --stdout "foo bar" "efindmnt"

    delete=0
    assert_false assert_no_mount_leaks

    assert_emock_called "efindmnt" 1
    assert_emock_called "eunmount" 1
    assert_emock_called "rm"       0
}
