#!/usr/bin/env bash
#
# Copyright 2022, Marshall McMullen <marshall.mcmullen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

#-----------------------------------------------------------------------------------------------------------------------
#
# Setup
#
#-----------------------------------------------------------------------------------------------------------------------

MOCKS=(
    "os"
    "running_in_docker"
    "reexec"
)

# Create a bunch of mocks for cgroup related functions.
setup()
{
    etestmsg "Creating $(lval MOCKS)"
    for mock in "${MOCKS[@]}"; do
        emock "${mock}"
    done

    emock --return 1 "running_in_docker"

    trap_add "teardown"

    emock_dump_all_state
}

teardown()
{
    etestmsg "Unmocking $(lval MOCKS)"
    for mock in "${MOCKS[@]}"; do
        eunmock "${mock}"
    done
}

#-----------------------------------------------------------------------------------------------------------------------
#
# Tests
#
#-----------------------------------------------------------------------------------------------------------------------

# Verify we will NOT use mount namespaces by default. This is opt-in only now.
ETEST_options_mountns_defaults()
{
    etestmsg "Calling 'etest'"
    set -- --no-subreaper
    source "${EBASH}/etest/options.sh"

    etestmsg "Verifying mocks"
    assert_emock_called "os"                0
    assert_emock_called "running_in_docker" 0
    assert_emock_called "reexec"            0
}

# Verify we cant opt-in for mount namespaces.
ETEST_options_mountns_opt_in()
{
    etestmsg "Calling 'etest --mountns'"
    set -- --no-subreaper --mountns
    source "${EBASH}/etest/options.sh"

    etestmsg "Verifying mocks"
    assert_emock_called "os"                1
    assert_emock_called "running_in_docker" 1
    assert_emock_called "reexec"            1
    assert_emock_called_with "reexec" 0 \
        --sudo --mountns
}

# Verify we will not use mount namespaces if not on Linux EVEN IF we opted in for it!
ETEST_options_mountns_not_linux()
{
    etestmsg "Setting up test-specific mocks"
    emock --return 1 "os"
    trap_add "eunmock os"

    etestmsg "Calling 'etest --mountns'"
    set -- --no-subreaper --mountns
    source "${EBASH}/etest/options.sh"

    etestmsg "Verifying mocks"
    assert_emock_called "os"                1
    assert_emock_called "running_in_docker" 0
    assert_emock_called "reexec"            0
}

# Verify we can opt-out of mount namespaces
ETEST_options_mountns_opt_out()
{
    etestmsg "Calling 'etest --no-mountns'"
    set -- --no-subreaper --no-mountns
    source "${EBASH}/etest/options.sh"

    etestmsg "Verifying mocks"
    assert_emock_called "os"                0
    assert_emock_called "running_in_docker" 0
    assert_emock_called "reexec"            0
}

# Verify mount namespaces not used on docker
ETEST_options_mountns_docker()
{
    etestmsg "Setting up test-specific mocks"
    emock "running_in_docker"

    etestmsg "Calling 'etest'"
    set -- --no-subreaper --mountns
    source "${EBASH}/etest/options.sh"

    etestmsg "Verifying mocks"
    assert_emock_called "os"                1
    assert_emock_called "running_in_docker" 1
    assert_emock_called "reexec"            0
}
