#!/usr/bin/env bash
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}
source "${EBASH}/ebash.sh" || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

# Import
source "${EBASH_HOME}/install/nodejs"

ETEST_clean_installation_check()
{
    emock "which" '
    {
        return 1
    }'
    check_for_node_installation
}

ETEST_cleanup_with_existing_symlinks()
{
    # Establish a test directory to install into
    local test_prefix
    test_prefix="$(mktemp -u usr_local.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    local extracted_dir="${test_prefix_dir}/node-1.2.3.4"

    # Simulate existing install
    mkdir -p "${extracted_dir}/bin"
    mkdir -p "${test_prefix_dir}/bin"
    ln -sv "${extracted_dir}" "${test_prefix_dir}/node"

    # Create binary symlinks
    binaries=(
        "node"
        "npm"
        "npx"
        "nvm"
    )

    # Mock os call to disable darwin check
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 1
        fi
    }'

    for binary in "${binaries[@]}"; do
        echo "I think therefor I am" > "${extracted_dir}/bin/${binary}"
        ln -sv "${test_prefix_dir}/node/bin/${binary}" "${test_prefix_dir}/bin/${binary}"
    done

    cleanup_node_symlinks --install-prefix "${test_prefix_dir}"

    # All files should be cleaned up
    for binary in "${binaries[@]}"; do
        assert_not_exists "${test_prefix_dir}/bin/${binary}"
    done

    # Make sure top level node symlink is also removed
    assert_not_exists "${test_prefix_dir}/node"

    # All files in the 'extracted' nodejs directory should still exist
    for binary in "${binaries[@]}"; do
        assert_exists "${extracted_dir}/bin/${binary}"
    done
}

ETEST_cleanup_with_existing_symlinks_on_mac()
{
    # Establish a test directory to install into
    local test_prefix
    test_prefix="$(mktemp -u usr_local.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    local extracted_dir="${test_prefix_dir}/node-1.2.3.4"

    # Simulate existing install
    mkdir -p "${extracted_dir}/bin"
    mkdir -p "${test_prefix_dir}/bin"
    ln -sv "${extracted_dir}" "${test_prefix_dir}/node"

    # Create binary symlinks
    binaries=(
        "node"
        "npm"
        "npx"
        "nvm"
    )

    for binary in "${binaries[@]}"; do
        echo "I think therefor I am" > "${extracted_dir}/bin/${binary}"
        ln -sv "${test_prefix_dir}/node/bin/${binary}" "${test_prefix_dir}/bin/${binary}"
    done

    # Setup Mock for Mac
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 0
        fi
    }'

    cleanup_node_symlinks --install-prefix "${test_prefix_dir}"

    # Nothing should be cleaned up, make sure all files still exist
    for binary in "${binaries[@]}"; do
        assert_exists "${test_prefix_dir}/bin/${binary}"
    done

    # Make sure top level node symlink is also removed
    assert_exists "${test_prefix_dir}/node"

    # All files in the 'extracted' nodejs directory should still exist
    for binary in "${binaries[@]}"; do
        assert_exists "${extracted_dir}/bin/${binary}"
    done
}

ETEST_cleanup_with_node_dir()
{
    # Establish a test directory to install into
    local test_prefix
    test_prefix="$(mktemp -u prefix_dir.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    mkdir -p "${test_prefix_dir}/node"

    # Mock os call to disable darwin check
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 1
        fi
    }'

    assert_false cleanup_node_symlinks --install-prefix "${test_prefix_dir}"
    assert_exists "${test_prefix_dir}/node"
}

ETEST_install_node_non_supported()
{
    # Setup test vars
    local lts_version="1.2.3.4"
    local lts_codename="TestName"
    local test_prefix
    test_prefix="$(mktemp -u prefix_dir.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"

    emock --stdout "${lts_version}" --return 0 "get_latest_node_version"
    emock --return 1 "os"

    assert_false install_nodejs --install-prefix "${test_prefix_dir}" --lts-codename "${lts_codename}"
}

ETEST_install_node_linux()
{
    # Setup test vars
    local lts_version="1.2.3.4"
    local lts_codename="TestName"
    local test_prefix
    test_prefix="$(mktemp -u prefix_dir.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"

    local tarball_folder="node-v${lts_version}-linux-x64"
    local tarball="${TEST_DIR_OUTPUT}/tmp/${tarball_folder}.tar.gz"
    local tarball_loc="${TEST_DIR_OUTPUT}/tmp/${tarball_folder}"
    local test_url="https://nodejs.org/download/release/latest-${lts_codename}/node-v${lts_version}-linux-x64.tar.gz"

    # Create simulated extracted folder
    mkdir -p "${tarball_loc}/bin"

    # Create dummy binaries files
    binaries=(
        "node"
        "npm"
        "npx"
    )
    for binary in "${binaries[@]}"; do
        echo "I think therefor I am" > "${tarball_loc}/bin/${binary}"
    done

    # Create the dummy tar.gz that efetch should download
    pushd "${TEST_DIR_OUTPUT}/tmp"
    tar cvf - "${tarball_folder}" | gzip > "${tarball}"
    popd

    # Setup Mocks
    emock --return 0 "cleanup_node_symlinks"
    emock --return 0 "efetch"
    emock --return 0 "eretry"
    emock --return 0 "verify_symlinks"
    emock --stdout "${lts_version}" --return 0 "get_latest_node_version"

    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 1
        elif [[ "$@" == "linux" ]]; then
            return 0
        else
            return 1
        fi
    }'

    # Make the call
    install_nodejs --install-prefix "${test_prefix_dir}" --lts-codename "${lts_codename}"

    # Verify correct Mocks
    assert_emock_called_with "get_latest_node_version" 0 \
        --lts-codename "${lts_codename}"                 \
        --sha-output-path "${default_sha_path}"

    assert_emock_called_with "eretry" 0 \
        efetch --style=einfo "${test_url}" "${tarball}"

    assert_emock_called_with "cleanup_node_symlinks" 0 \
        --install-prefix "${test_prefix_dir}"

    assert_emock_called_with "verify_symlinks" 0 \
        --install-prefix "${test_prefix_dir}"    \
        --lts-version "${lts_version}"

    # Verify correct structure in place after the install
    for binary in "${binaries[@]}"; do
        assert_exists "${test_prefix_dir}/bin/${binary}"
        assert_exists "${test_prefix_dir}/${tarball_folder}/bin/${binary}"
    done

    # Verify structures
    assert_exists "${test_prefix_dir}/node"

    # This should get created if it doesn't exist (doesn't in this test prefix initially)
    assert_exists "${test_prefix}/bin"
}

ETEST_install_node_mac()
{
    # Setup test vars
    local lts_codename="TestName"
    local expected_mac_version="1"
    local expected_package="node@${expected_mac_version}"

    local test_prefix
    test_prefix="$(mktemp -u prefix_dir.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"

    # Setup Mocks
    emock "get_latest_node_version" '
    {
        echo "1.2.3.4"
    }'

    emock --return 0 "os"

    emock --return 0 "pkg_install"

    emock --return 0 "brew"

    # Make the call
    install_nodejs --install-prefix "${test_prefix_dir}" --lts-codename "${lts_codename}"

    # NOTE: This test's intent is to verify the proper calls, since we don't want to duplicate the
    #       testing that already occurs for the individual ebash built-ins
    # Verify the mocks being called correctly
    assert_emock_called_with "get_latest_node_version" 0 \
        --lts-codename "${lts_codename}"                 \
        --sha-output-path "${default_sha_path}"

    assert_emock_called_with "os" 0 \
        darwin

    assert_emock_called_with "pkg_install" 0 \
        --sync "${expected_package}"
}

# Simulate cleaning up a system that has parts of nodejs installed.
# This is a separation of concerns test such that regardless of whatever files are in <prefix>/bin
# there's nothing to clean up because a <prefix>/node directory doesn't exist
ETEST_install_prefix_real_files()
{
    # Establish a test directory to install into
    local test_prefix
    test_prefix="$(mktemp -u usr_local.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    local test_file="${test_prefix_dir}/bin/node"

    # Simulate existing install creating a real file, not a symlink
    mkdir -p "${test_prefix_dir}/bin"
    echo "I think therefor I am" > "${test_file}"

    # Mock os call to disable darwin check
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 1
        fi
    }'

    # Verify the call passes, the <test_prefix>/node folder doesn't exist so there is nothing to clean up
    assert_true cleanup_node_symlinks --install-prefix "${test_prefix_dir}"

    # Make sure the file wasn't touched
    assert_exists "${test_file}"
}

ETEST_node_installation_check()
{
    emock "which" '
    {
        if [[ arg[0] == "node" ]]; then
            echo "/usr/local/bin/node"
            return 0
        else
            return 1
        fi
    }'
    check_for_node_installation || assert_eq 3 "${?}"
}

ETEST_npm_installation_check()
{
    emock "which" '
    {
        if [[ arg[0] == "npm" ]]; then
            echo "/usr/local/bin/npm"
            return 0
        else
            return 1
        fi
    }'
    check_for_node_installation || assert_eq 2 "${?}"
}

ETEST_nvm_installation_check()
{
    emock "which" '
    {
        if [[ arg[0] == "nvm" ]]; then
            echo "/usr/local/bin/nvm"
            return 0
        else
            return 1
        fi
    }'
    check_for_node_installation || assert_eq 1 "${?}"
}

ETEST_get_latest_node_version()
{
    local codename="gallium"
    local expected_version="16.13.2"
    local sha_file="${TEST_DIR_OUTPUT}/nodejs_SHASUMS256.txt"

    # Establish mock
    emock "retrieve_sha" '
    {
        return 0
    }'

    # Test Legit version
    cat > "${sha_file}" <<-END
451367428b40095656133  node-v16.13.2-aix-ppc64.tar.gz
END
    actual_version=$(get_latest_node_version --lts-codename "${codename}" --sha-output-path "${sha_file}")
    assert_eq "${expected_version}" "${actual_version}"

    # Test Bogus version
    cat > "${sha_file}" <<-END
451367428b40095656133  node-.13.2-aix-ppc64.tar.gz
END

    assert_false get_latest_node_version --lts-codename "${codename}" --sha-output-path "${sha_file}"
    assert_not_exists "${sha_file}"
}

ETEST_verify_symlinks()
{
    # Establish a test directory to install into
    local test_lts_version="1.2.3.4"
    local test_prefix
    test_prefix="$(mktemp -u usr_local.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    local extracted_dir="${test_prefix_dir}/node-v${test_lts_version}-linux-x64"

    # Simulate existing install
    mkdir -p "${extracted_dir}/bin"
    mkdir -p "${test_prefix_dir}/bin"
    ln -sv "${extracted_dir}" "${test_prefix_dir}/node"

    # Create test symlinks
    binaries=(
        "node"
        "npm"
        "npx"
    )

    PATH="${test_prefix_dir}/bin:${PATH}"

    # Mock os call to disable darwin check
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 1
        fi
    }'

    for binary in "${binaries[@]}"; do
        echo "I think therefor I am" > "${extracted_dir}/bin/${binary}"
        chmod +x "${extracted_dir}/bin/${binary}"
        ln -sv "${test_prefix_dir}/node/bin/${binary}" "${test_prefix_dir}/bin/${binary}"
    done

    verify_symlinks --install-prefix "${test_prefix}" --lts-version "${test_lts_version}"

    # Remove a symlink and reverify
    rm -f "${test_prefix_dir}/bin/node"

    # Make sure folder doesn't exist
    assert_not_exists "${test_prefix_dir}/bin/node"

    # Make sure the function call fails
    assert_false verify_symlinks --install-prefix "${test_prefix}" --lts-version "${test_lts_version}"
}

ETEST_verify_symlinks_on_mac()
{
    # Establish a test directory to install into
    local test_lts_version="1.2.3.4"
    local test_prefix
    test_prefix="$(mktemp -u usr_local.XXXXXX)"
    local test_prefix_dir="${TEST_DIR_OUTPUT}/${test_prefix}"
    local extracted_dir="${test_prefix_dir}/node-v${test_lts_version}-linux-x64"

    # Simulate existing install
    mkdir -p "${extracted_dir}/bin"
    mkdir -p "${test_prefix_dir}/bin"
    ln -sv "${extracted_dir}" "${test_prefix_dir}/node"

    # Create test symlinks
    binaries=(
        "node"
        "npm"
        "npx"
    )

    PATH="${test_prefix_dir}/bin:${PATH}"

    # Create entries in the extracted dir, but not in the <test_prefix_dir>/bin
    for binary in "${binaries[@]}"; do
        echo "I think therefor I am" > "${extracted_dir}/bin/${binary}"
        chmod +x "${extracted_dir}/bin/${binary}"
    done

    # Setup Mock for Mac
    emock "os" '
    {
        if [[ "$@" == "darwin" ]]; then
            return 0
        fi
    }'

    # This should pass since this function is a no-op on mac
    verify_symlinks --install-prefix "${test_prefix}" --lts-version "${test_lts_version}"

    # NOTE: This test setup on Linux should fail, we are verifying the no-op aspect
    for binary in "${binaries[@]}"; do
        # Symlinks were created for extracted dir
        assert_exists "${extracted_dir}/bin/${binary}"

        # Symlinks never created in prefix dir
        assert_not_exists "${test_prefix_dir}/bin/${binary}"
    done
}
