#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

setup()
{
    pkg_known=coreutils
    pkg_unknown=does-not-exist
    pkg_installed=coreutils
    pkg_candidates=(hello banner lolcat fortune)

    # Find package we can install from pkg_candidates
    local pkg="" found=0
    for pkg in ${pkg_candidates[@]}; do
        etestmsg "Checking $(lval pkg pkg_candidates)"
        if pkg_known ${pkg} && ! pkg_installed ${pkg}; then
            found=1
            break
        fi
    done

    assert_eq 1 "${found}" "Failed to find installable package from $(lval pkg_candidates)"

    pkg_to_install="${pkg}"
    etestmsg "$(lval pkg_known pkg_unknown pkg_installed pkg_to_install)"
}

ETEST_pkg_0001_manager()
{
    assert_ne "unknown" "$(pkg_manager)"
}

ETEST_pkg_known()
{
    pkg_known ${pkg_known}
    assert_false pkg_known ${pkg_unknown}
}

ETEST_pkg_install_twice()
{
    etestmsg "First make sure $(lval pkg_to_install) is not installed."
    pkg_known ${pkg_to_install}
    assert_false pkg_installed ${pkg_to_install}

    # NOTE: Some packaging systems (e.g. dpkg) don't deal well with different processes trying to install things at the
    # same time. The retries here are intended to harden against issues like that.
    etestmsg "Install $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_install ${pkg_to_install}

    # Make sure things get cleaned up, even if something goes wrong after this point
    trap_add "etestmsg CLEANUP ; pkg_uninstall ${pkg_to_install} || true"

    etestmsg "Verify $(lval pkg_to_install) exists and can be verified as installed."
    pkg_known ${pkg_to_install}
    pkg_installed ${pkg_to_install}

    etestmsg "Attempt secondary install on $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_install ${pkg_to_install}
    pkg_known ${pkg_to_install}
    pkg_installed ${pkg_to_install}

    etestmsg "Uninstall $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_uninstall ${pkg_to_install}

    etestmsg "and verify that we don't believe $(lval pkg_to_install) is installed."
    pkg_known ${pkg_to_install}
    assert_false pkg_installed ${pkg_to_install}
}

ETEST_pkg_install_and_upgrade()
{
    etestmsg "First make sure $(lval pkg_to_install) is not installed."
    pkg_known ${pkg_to_install}
    assert_false pkg_installed ${pkg_to_install}

    # NOTE: Some packaging systems (e.g. dpkg) don't deal well with different processes trying to install things at the
    # same time. The retries here are intended to harden against issues like that.
    etestmsg "Install $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_install ${pkg_to_install}

    # Make sure things get cleaned up, even if something goes wrong after this point
    trap_add "etestmsg CLEANUP ; pkg_uninstall ${pkg_to_install} || true"

    etestmsg "Verify $(lval pkg_to_install) exists and can be verified as installed."
    pkg_known ${pkg_to_install}
    pkg_installed ${pkg_to_install}

    etestmsg "Attempt upgrade on $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_upgrade ${pkg_to_install}
    pkg_known ${pkg_to_install}
    pkg_installed ${pkg_to_install}

    etestmsg "Uninstall $(lval pkg_to_install)"
    eretry --delay 5s --retries 5 pkg_uninstall ${pkg_to_install}

    etestmsg "and verify that we don't believe $(lval pkg_to_install) is installed."
    pkg_known ${pkg_to_install}
    assert_false pkg_installed ${pkg_to_install}
}

ETEST_pkg_binary()
{
    etestmsg "Converting binary to package name"
    EDEBUG+=" pkg_binary __pkg_binary"

    if os darwin; then
        assert_eq "coreutils"                       "$(pkg_binary chroot)"
        assert_eq "coreutils"                       "$(pkg_binary true fold)"
        assert_eq "bash"                            "$(pkg_binary bash)"
        assert_eq "grep"                            "$(pkg_binary grep)"
        assert_eq "lshw openssh"                    "$(pkg_binary lshw sshd)"
        assert_eq "perl"                            "$(pkg_binary perl)"
        assert_eq "xorriso"                         "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "debootstrap"                     "$(pkg_binary debootstrap)"
        assert_eq "jq"                              "$(pkg_binary jq)"

    elif os_distro alpine; then
        assert_eq "coreutils"                       "$(pkg_binary chroot)"
        assert_eq "coreutils"                       "$(pkg_binary true fold)"
        assert_eq "bash"                            "$(pkg_binary bash)"
        assert_eq "grep"                            "$(pkg_binary grep)"
        assert_eq "lshw openssh"                    "$(pkg_binary lshw sshd)"
        assert_eq "perl"                            "$(pkg_binary perl)"
        assert_eq "libisoburn"                      "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "debootstrap"                     "$(pkg_binary debootstrap)"
        assert_eq "jq"                              "$(pkg_binary jq)"

    elif os_distro debian mint ubuntu; then
        assert_eq "coreutils"                       "$(pkg_binary chroot)"
        assert_eq "coreutils"                       "$(pkg_binary true fold)"
        assert_eq "bash"                            "$(pkg_binary bash)"
        assert_eq "grep"                            "$(pkg_binary grep)"
        assert_eq "lshw openssh-server"             "$(pkg_binary lshw sshd)"
        assert_eq "perl-base"                       "$(pkg_binary perl)"
        assert_eq "genisoimage"                     "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "genisoimage"                     "$(pkg_binary "genisoimage|xorrisofs")"
        assert_eq "debootstrap"                     "$(pkg_binary debootstrap)"
        assert_eq "jq"                              "$(pkg_binary jq)"

    elif os_distro arch; then
        assert_eq "coreutils"                       "$(pkg_binary chroot)"
        assert_eq "coreutils"                       "$(pkg_binary true fold)"
        assert_eq "bash"                            "$(pkg_binary bash)"
        assert_eq "grep"                            "$(pkg_binary grep)"
        assert_eq "lshw openssh"                    "$(pkg_binary lshw sshd)"
        assert_eq "perl"                            "$(pkg_binary perl)"
        assert_eq "cdrtools"                        "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "genisoimage"                     "$(pkg_binary "genisoimage|xorrisofs")"
        assert_eq "libisoburn"                      "$(pkg_binary "xorrisofs")"
        assert_eq "debootstrap"                     "$(pkg_binary debootstrap)"
        assert_eq "jq"                              "$(pkg_binary jq)"

    elif os_distro gentoo ember; then
        assert_eq "sys-apps/coreutils"              "$(pkg_binary chroot)"
        assert_eq "sys-apps/coreutils"              "$(pkg_binary true fold)"
        assert_eq "app-shells/bash"                 "$(pkg_binary bash)"
        assert_eq "sys-apps/grep"                   "$(pkg_binary grep)"
        assert_eq "net-misc/openssh sys-apps/lshw"  "$(pkg_binary lshw sshd)"
        assert_eq "dev-lang/perl"                   "$(pkg_binary perl)"
        assert_eq "app-arch/gzip"                   "$(pkg_binary gzip)"
        assert_eq "app-arch/bzip2"                  "$(pkg_binary "bzip2|lbzip2|pbzip2")"
        assert_eq "app-arch/bzip2"                  "$(pkg_binary "NOPACKAGE|bzip2|lbzip2|pbzip2")"
        assert_eq "app-cdr/cdrkit app-cdr/cdrtools" "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "dev-util/debootstrap"            "$(pkg_binary debootstrap)"
        assert_eq "app-misc/jq"                     "$(pkg_binary jq)"

    elif os_distro centos fedora; then
        assert_eq "coreutils"                       "$(pkg_binary chroot)"
        assert_eq "coreutils"                       "$(pkg_binary true fold)"
        assert_eq "bash"                            "$(pkg_binary bash)"
        assert_eq "grep"                            "$(pkg_binary grep)"
        assert_eq "lshw openssh-server"             "$(pkg_binary lshw sshd)"
        assert_eq "perl"                            "$(pkg_binary perl)"
        assert_eq "genisoimage"                     "$(pkg_binary "mkisofs|genisoimage|xorrisofs")"
        assert_eq "genisoimage"                     "$(pkg_binary "genisoimage|xorrisofs")"
        assert_eq "debootstrap"                     "$(pkg_binary debootstrap)"
        assert_eq "jq"                              "$(pkg_binary jq)"

    else
        die "Unsupported OS: $(os_pretty_name)"
    fi
}

ETEST_pkg_binary_invalid()
{
    etestmsg "Testing invalid binary names"
    EDEBUG+=" pkg_binary __pkg_binary"

    assert_false pkg_binary "/bin/bash"
    assert_false pkg_binary "not-a-real-package"
}

if os_distro gentoo ember ; then

    ETEST_pkg_gentoo_find()
    {
        assert_eq "www-servers/nginx" "$(pkg_gentoo_canonicalize nginx)"
    }

    ETEST_pkg_gentoo_find_ambiguous()
    {
        etestmsg "Looking for category for ssh app, which lives in virtual AND python-dev"
        $(tryrc --stderr stderr pkg_gentoo_canonicalize ssh)
        assert_ne 0 ${rc}
        assert_match "${stderr}" "ambiguous"
    }
fi
