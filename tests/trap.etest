#!/usr/bin/env bash
#
# Copyright 2011-2021, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# Basic trap_add and trap_get sanity test with 1 signal.
ETEST_trap_add()
{
    trap_add 'echo foo' SIGHUP
    assert_eq 'echo foo;die -s=SIGHUP "[Caught SIGHUP pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get SIGHUP)"
}

# Verify a bug is fixed where we were building up a combined trap with the same command multiple times if given an
# explicit list of signals. This was caused by not initializing the trap on the first time through the for loop inside
# trap_add.
ETEST_trap_add_multiple_signals()
{
    trap_add 'echo foo' SIGHUP SIGUSR1
    assert_eq 'echo foo;die -s=SIGHUP "[Caught SIGHUP pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get SIGHUP)"
    assert_eq 'echo foo;die -s=SIGUSR1 "[Caught SIGUSR1 pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get SIGUSR1)"

    # Untrapped signals still receive default handling without the 'echo foo' command
    for sig in ${DIE_SIGNALS[@]}; do

        if [[ "${sig}" == @(SIGHUP|SIGUSR1) ]]; then
            continue
        fi

        assert_eq 'die -s='${sig}' "[Caught '${sig}' pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get ${sig})"
    done

}

# Verify implicit ebash traps added for exit to propogate failures to caller properly.
ETEST_trap_add_exit()
{
    trap_add 'echo foo' EXIT SIGHUP SIGUSR1
    assert_eq '_ebash_on_exit_start;echo foo;_ebash_on_exit_end' "$(trap_get EXIT)"
    assert_eq 'echo foo;die -s=SIGHUP "[Caught SIGHUP pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get SIGHUP)"
    assert_eq 'echo foo;die -s=SIGUSR1 "[Caught SIGUSR1 pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get SIGUSR1)"
}

# Verify implicit traps when no signals added
ETEST_trap_add_defaults()
{
    trap_add 'echo foo'
    assert_eq '_ebash_on_exit_start;echo foo;_ebash_on_exit_end' "$(trap_get EXIT)"

    # Untrapped signals still receive default handling without the 'echo foo' command
    for sig in ${DIE_SIGNALS[@]}; do
        assert_eq 'die -s='${sig}' "[Caught '${sig}' pid=${BASHPID} cmd=$(string_truncate -e $(tput cols) ${BASH_COMMAND})"]' "$(trap_get ${sig})"
    done
}

ETEST_err_and_debug_traps_are_inherited()
{
    on_error()
    {
        echo "ERROR $BASHPID"
    }

    on_debug()
    {
        true
    }

    trap on_error ERR
    trap on_debug DEBUG
    local expected
    expected=$(trap -p ERR DEBUG)

    etestmsg "Error trap is $(lval expected)"

    (
        etestmsg "Inside subshell you can see it."
        assert_eq "${expected}" "$(trap -p ERR DEBUG)"

        # Without ebash shenanigans, bash will reset your inherited error trap after you set any other trap including
        # SIGUSR1. But ebash overrides this and restores the ERR trap.
        etestmsg "Verifying that it remains after a call to trap."
        trap on_usr1 SIGUSR1
        assert_eq "${expected}" "$(trap -p ERR DEBUG)"

        (
            etestmsg "Inside a second subshell."
            assert_eq "${expected}" "$(trap -p ERR DEBUG)"

            etestmsg "Verifying it still remains after a call to trap_add."
            trap_add "true"
            assert_eq "${expected}" "$(trap -p ERR DEBUG)"
        )
    )
    etestmsg "End test."
}

ETEST_trap_add_two_per_shell()
{
    assert_not_exists {a,b,c,d,e,f}

    (
        trap_add "touch a"
        trap_add "touch b"
        (
            trap_add "touch c"
            trap_add "touch d"
            (
                trap_add "touch e"
                trap_add "touch f"
            )
            assert_exists e f
        )
        assert_exists c d
    )
    assert_exists a b

    rm -f {a,b,c,d,e,f}
}
