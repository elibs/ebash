#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# DT-373: Dialog doesn't work properly on OSX and Ubuntu 12.04. The version of dialog on Darwin does not properly handle
# EBASH_KEY_DELETE and also misses the final character on the last field being modified. Ubuntu 12.04 has a very old
# version of dialog and it is missing required flags --default-button and --default-item. This check will exclude these
# two OSes completely so the code doesn't get included at all. This means we don't have to check for support in all the
# dialog functions as they won't be emitted or callable at all.
if os_distro ubuntu && os_release 12.04; then
    return 0
fi

# Setup flags we want to use for all these tests
dialog_options="--hide --trace"

# Verify if we have a bunch of input queued up and multiple dialog prompts displayed one after another that each one
# gets the correct input characters. This exercises a race condition in how ebash dialog wrapper detected dialog exit
# and try to read extra characters effectively stealing the ones intended for the next dialog prompt.
ETEST_dialog_multiple_prompts()
{
    worker()
    {
        etestmsg "worker function called"

        etestmsg "Prompting for domain"
        $(dialog_prompt ${dialog_options} \
            --geometry="23 70 70"         \
            domain="home.net"             \
        )

        etestmsg "$(lval domain)"
        echo "${domain}" > domain

        servers=(
            "0" "NEW"         "off"
            "1" "10.204.2.11" "on"
        )

        $(dialog_checklist ${dialog_options} \
            --no-delete                      \
            servers                          \
        )

        # Check if "NEW SERVER" was selected.
        if [[ ${servers[2]} == "on" ]]; then
            $(dialog_prompt ${dialog_options} \
                "ip_address"                  \
            )

            edebug "Adding a new nameserver $(lval ip_address)"
            servers+=( 2 "${ip_address}" "on" )

            # Disable "NEW" for next iteration and then continue to give user a chance to add/remove more
            servers[2]="off"
        fi

        etestmsg "$(lval servers)"
        for (( idx=0; idx < ${#servers[@]}; idx++ )); do
            if (( (idx + 1 ) % 3 == 0 )); then
                echo "${servers[$idx]}" >> servers
            else
                echo -n "${servers[$idx]} " >> servers
            fi
        done
    }

    local input=(
        # SEARCH DOMAIN MENU
        "${EBASH_KEY_TAB}"      # Tab down to OK/Cancel
        "${EBASH_KEY_ENTER}"    # Enter OK to go to next screen leaving default domain

        # NAME SERVERS MENU
        "${EBASH_KEY_SPACE}"     # Select new server
        "${EBASH_KEY_ENTER}"    # Enter OK

        # NEW SERER SUBMENU
        "192.168.1.1"           # New IP address
        "${EBASH_KEY_DOWN}"     # Move down into "OK/Cancel"
        "${EBASH_KEY_ENTER}"    # Enter OK

        # NAME SERVERS MENU
        "${EBASH_KEY_ENTER}"    # Finish Main Menu
    )

    etestmsg "Calling worker function with input"
    #worker < <(printf "%s" "${input[@]/#/}")
    $(printf "%s" "${input[@]/#/}" | worker)

    etestmsg "Checking servers file"
    cat domain
    assert_eq "home.net" "$(cat domain)"

    cat >expect <<-'END'
	0 NEW off
	1 10.204.2.11 on
	2 192.168.1.1 on
	END

    etestmsg "Checking servers file"
    cat servers
    diff --unified expect servers
}
