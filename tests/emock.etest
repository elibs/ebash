#!/usr/bin/env bash
#
# Copyright 2021, Marshall McMullen <marshall.mcmullen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

#-----------------------------------------------------------------------------------------------------------------------
#
# Setup
#
#-----------------------------------------------------------------------------------------------------------------------

# Binary we can mock out. This should ideally be one that:
# (1) Exists on all target systems we run tests on
# (2) We do not need to use inside this test or in any functions we call. Since we're mocking it out it won't be
#     callable.
test_binary="reset"
test_binary_path="$(which ${test_binary})"
test_binary_flag="-V"

dump_state()
{
    local fname="" contents=""
    for fname in $(find .emock-$$ -type f); do
        contents=""
        if [[ $(basename "${fname}") == "args" ]]; then
            array_init_nl contents "$(cat ${fname})"
        else
            contents="$(cat "${fname}")"
        fi

        etestmsg "$(lval fname contents)"
    done
}

#-----------------------------------------------------------------------------------------------------------------------
#
# Tests
#
#-----------------------------------------------------------------------------------------------------------------------
ETEST_emock()
{
    etestmsg "Mocking ${test_binary}"
    emock "${test_binary}"
    assert_eq "function" "$(type -t ${test_binary})"
    eunmock "${test_binary}"
    assert_match "$(hash -r; type ${test_binary})" "${test_binary} is ${test_binary_path}"
}

ETEST_emock_path()
{
    etestmsg "Mocking ${test_binary} with full path"
    emock "${test_binary_path}"
    assert_eq "function" "$(type -t ${test_binary_path})"
    eunmock "${test_binary_path}"
    assert_match "$(hash -r; type ${test_binary_path})" "${test_binary_path} is ${test_binary_path}"
}

ETEST_emock_filesystem()
{
    # Skip if we are not running in docker to avoid changing root filesystem
    $(skip_if "! running_in_docker")

    etestmsg "Mocking ${test_binary} with full path and --filesystem"
    emock --filesystem "${test_binary_path}"
    trap_add "eunmock ${test_binary_path}"

    assert_eq "file" "$(type -t ${test_binary_path})"
    assert_eq "file" "$(type -t ${test_binary_path}_real)"
    assert_eq "filesystem" "$(emock_mode "${test_binary}")"
    assert_exists "${test_binary_path}_real"
}

ETEST_emock_filesystem_multiple()
{
    # Skip if we are not running in docker to avoid changing root filesystem
    $(skip_if "! running_in_docker")

    etestmsg "Mocking ${test_binary} with full path and --filesystem"
    emock --filesystem "${test_binary_path}"
    assert_eq "file" "$(type -t ${test_binary_path})"
    assert_eq "file" "$(type -t ${test_binary_path}_real)"
    assert_eq "filesystem" "$(emock_mode "${test_binary}")"
    file -L "${test_binary_path}" | grep -Pq "(ASCII text|bash script|Bourne-Again shell script)"

    etestmsg "Mocking ${test_binary} with --filesystem and --return 1"
    emock --filesystem --return 1 "${test_binary_path}"
    grep "exit 1" "${test_binary_path}"

    etestmsg "Mocking ${test_binary} with --filesystem and --return 2"
    emock --filesystem --return 2 "${test_binary_path}"
    grep "exit 2" "${test_binary_path}"

    etestmsg "Unmocking"
    eunmock "${test_binary_path}"
    file -L "${test_binary_path}" | grep -Pq "ELF"
}

ETEST_emock_called()
{
    func() { true; }

    etestmsg "Mocking func"
    emock "func"
    dump_state
    assert_eq 0 "$(cat .emock-$$/func/called)"
    assert_eq 0 "$(emock_called func)"
    assert_emock_called "func" 0

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0"
    func
    dump_state
    assert_eq 1 "$(cat .emock-$$/func/called)"
    assert_eq 1 "$(emock_called func)"
    assert_emock_called "func" 1
    assert_eq "0" "$(emock_indexes "func")"
    assert_directory_contents .emock-$$/func \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args

    ## CALL 2 (index 1) ##
    echo
    etestmsg "Calling mock#1 index=1"
    func
    dump_state
    assert_eq 2 "$(cat .emock-$$/func/called)"
    assert_eq 2 "$(emock_called func)"
    assert_emock_called "func" 2
    assert_eq "0 1" "$(emock_indexes "func")"
    assert_eq "1" "$(emock_indexes --last "func")"
    assert_directory_contents .emock-$$/func \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args        \
        1             \
        1/return_code \
        1/stdin       \
        1/stdout      \
        1/stderr      \
        1/timestamp   \
        1/args
}

ETEST_emock_called_filesystem()
{
    # Skip if we are not running in docker to avoid changing root filesystem
    $(skip_if "! running_in_docker")

    etestmsg "Mocking ${test_binary} with full path and --filesystem"
    emock --filesystem "${test_binary_path}"
    trap_add "eunmock ${test_binary_path}"
    assert_eq "filesystem" "$(emock_mode "${test_binary}")"
    assert_exists "${test_binary_path}_real"
    assert_eq 0 "$(emock_called ${test_binary_path})"
    assert_emock_called "${test_binary_path}" 0

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0"
    ${test_binary_path}
    dump_state
    assert_eq 1 "$(cat .emock-$$/${test_binary}/called)"
    assert_eq 1 "$(emock_called ${test_binary_path})"
    assert_emock_called "${test_binary_path}" 1
    assert_eq "0" "$(emock_indexes --last "${test_binary_path}")"
    assert_directory_contents .emock-$$/${test_binary} \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args

    ## CALL 2 (index 1) ##
    echo
    etestmsg "Calling mock#2 index=1"
    ${test_binary_path}
    dump_state
    assert_eq 2 "$(cat .emock-$$/${test_binary}/called)"
    assert_eq 2 "$(emock_called ${test_binary_path})"
    assert_emock_called "${test_binary_path}" 2
    assert_directory_contents .emock-$$/${test_binary} \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args        \
        1             \
        1/return_code \
        1/stdin       \
        1/stdout      \
        1/stderr      \
        1/timestamp   \
        1/args
}

ETEST_emock_called_nonexistent()
{
    etestmsg "Mocking nonexistent function"
    emock "nonexistent"
    dump_state
    assert_eq 0 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 0 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 0

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0"
    nonexistent
    dump_state
    assert_eq 1 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 1 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 1
    assert_eq "0" "$(emock_indexes "nonexistent")"
    assert_directory_contents .emock-$$/nonexistent \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args

    ## CALL 2 (index 1) ##
    echo
    etestmsg "Calling mock#1 index=1"
    nonexistent
    dump_state
    assert_eq 2 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 2 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 2
    assert_eq "0 1" "$(emock_indexes "nonexistent")"
    assert_eq "1" "$(emock_indexes --last "nonexistent")"
    assert_directory_contents .emock-$$/nonexistent \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args        \
        1             \
        1/return_code \
        1/stdin       \
        1/stdout      \
        1/stderr      \
        1/timestamp   \
        1/args

    # Verify if you call the REAL of a nonexistent binary that it fails
    assert_false "nonexistent_real"

    # Verify we can unmock a nonexistent binary
    eunmock "nonexistent"
}

ETEST_emock_called_nonexistent_filesystem()
{
    etestmsg "Mocking nonexistent file"
    emock --filesystem "nonexistent"
    dump_state
    assert_eq 0 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 0 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 0

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0"
    ./nonexistent
    dump_state
    assert_eq 1 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 1 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 1
    assert_eq "0" "$(emock_indexes "nonexistent")"
    assert_directory_contents .emock-$$/nonexistent \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args

    ## CALL 2 (index 1) ##
    echo
    etestmsg "Calling mock#1 index=1"
    ./nonexistent
    dump_state
    assert_eq 2 "$(cat .emock-$$/nonexistent/called)"
    assert_eq 2 "$(emock_called nonexistent)"
    assert_emock_called "nonexistent" 2
    assert_eq "0 1" "$(emock_indexes "nonexistent")"
    assert_eq "1" "$(emock_indexes --last "nonexistent")"
    assert_directory_contents .emock-$$/nonexistent \
        called        \
        mode          \
        0             \
        0/return_code \
        0/stdin       \
        0/stdout      \
        0/stderr      \
        0/timestamp   \
        0/args        \
        1             \
        1/return_code \
        1/stdin       \
        1/stdout      \
        1/stderr      \
        1/timestamp   \
        1/args

    # Verify if you call the REAL of a nonexistent binary that it fails
    assert_false "./nonexistent_real"

    # Verify we can unmock a nonexistent binary
    eunmock "nonexistent"
}

ETEST_emock_indexes()
{
    func() { true; }

    etestmsg "Mocking func"
    emock "func"
    dump_state
    assert_emock_called "func" 0
    assert_empty "$(emock_indexes "func")"

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0"
    func
    dump_state
    assert_emock_called "func" 1
    assert_eq "0" "$(emock_indexes "func")"

    ## CALL 2 (index 1) ##
    echo
    etestmsg "Calling mock#2 index=1"
    func
    dump_state
    assert_emock_called "func" 2
    assert_eq "0 1" "$(emock_indexes "func")"
    assert_eq "1"   "$(emock_indexes --last "func")"

}

ETEST_emock_real()
{
    etestmsg "Verifying ${test_binary} points to a binary"
    assert_match "$(type ${test_binary})" "${test_binary} is ${test_binary_path}"

    etestmsg "Mocking ${test_binary}"
    emock "${test_binary}"
    assert_eq "function" "$(type -t ${test_binary})"
    assert_eq "function" "$(type -t ${test_binary}_real)"

    # Verify we can _use_ the real function
    etestmsg "Verifying we can call ${test_binary}_real wrapper"
    ${test_binary}_real ${test_binary_flag}
}

ETEST_emock_return_code()
{
    func()
    {
        return 1
    }

    etestmsg "Mocking func"
    emock --return-code 0 "func"

    etestmsg "Calling mocked func"
    $(tryrc func)
    assert_eq 0 ${rc}
    assert_eq 0 "$(emock_return_code "func" 0)"
    assert_emock_return_code "func" 0 0

    etestmsg "Calling func_real"
    $(tryrc func_real)
    assert_eq 1 ${rc}
}

ETEST_emock_stdin()
{
    etestmsg "Mocking"
    emock --stdin --stdout "mock stdout" --stderr "mock stderr" func
    etestmsg "Calling mocked func"
    echo "mock stdin" | func

    assert_eq "mock stdin" "$(emock_stdin func)"
    assert_emock_stdin "func" 0 "mock stdin"

    assert_eq "mock stdout" "$(emock_stdout func)"
    assert_emock_stdout "func" 0 "mock stdout"

    assert_eq "mock stderr" "$(emock_stderr func)"
    assert_emock_stderr "func" 0 "mock stderr"
}

ETEST_emock_stdout()
{
    func()
    {
        echo "func stdout" >&1
    }

    etestmsg "Mocking with stdout"
    emock --stdout "mock stdout" "func"

    etestmsg "Calling mocked func"
    $(tryrc --stdout=stdout func)
    assert_eq "mock stdout" "${stdout}"
    assert_eq "mock stdout" "$(emock_stdout "func")"
    assert_emock_stdout "func" 0 "mock stdout"

    etestmsg "Calling func_real"
    $(tryrc --stdout=stdout func_real)
    assert_eq "func stdout" "${stdout}"
}

ETEST_emock_stdout_repeat()
{
    func()
    {
        echo "func stdout" >&1
    }

    ## CALL 1 (index 0) ##
    etestmsg "Calling mock#1 index=0 (with stdout #0)"
    emock --stdout "mock stdout #0" "func"
    $(tryrc --stdout=stdout func)
    assert_eq 1 "$(emock_called func)"
    assert_eq 0 "$(emock_indexes func)"
    assert_eq "mock stdout #0" "${stdout}"
    assert_eq "mock stdout #0" "$(emock_stdout "func")"
    assert_eq "mock stdout #0" "$(emock_stdout "func" 0)"
    assert_emock_stdout "func" 0 "mock stdout #0"

    ## CALL 2 (index 1) ##
    etestmsg "Calling mock#2 index=1 (with stdout #1)"
    emock --stdout "mock stdout #1" "func"
    $(tryrc --stdout=stdout func)
    assert_eq 2 "$(emock_called func)"
    assert_eq "0 1" "$(emock_indexes func)"
    assert_eq "1" "$(emock_indexes --last func)"
    assert_eq "mock stdout #1" "${stdout}"
    assert_eq "mock stdout #1" "$(emock_stdout "func")"
    assert_eq "mock stdout #1" "$(emock_stdout "func" 1)"
    assert_emock_stdout "func" 1 "mock stdout #1"

    ## CALL 3 (index 2) ##
    etestmsg "Calling mock#3 index=2 (with stdout #2)"
    emock --stdout "mock stdout #2" "func"
    $(tryrc --stdout=stdout func)
    assert_eq 3 "$(emock_called func)"
    assert_eq "0 1 2" "$(emock_indexes func)"
    assert_eq 2 "$(emock_indexes --last func)"
    assert_eq "mock stdout #2" "${stdout}"
    assert_eq "mock stdout #2" "$(emock_stdout "func")"
    assert_eq "mock stdout #2" "$(emock_stdout "func" 2)"
    assert_emock_stdout "func" 2 "mock stdout #2"

    etestmsg "Verifying older entries not erased"
    assert_eq "mock stdout #1" "$(emock_stdout "func" 1)"
    assert_emock_stdout "func" 1 "mock stdout #1"
}

ETEST_emock_stderr()
{
    func()
    {
        echo "func stdout" >&1
        echo "func stderr" >&2
        return 1
    }

    etestmsg "Mocking with stdout and stderr"
    emock --return-code 0 --stdout "mock stdout" --stderr "mock stderr" "func"

    etestmsg "Calling mocked func"
    $(tryrc --stdout=stdout --stderr=stderr func)
    assert_eq 0 ${rc}
    assert_eq "mock stdout" "${stdout}"
    assert_eq "mock stderr" "${stderr}"
    assert_eq "mock stdout" "$(emock_stdout "func")"
    assert_emock_stdout "func" 0 "mock stdout"

    etestmsg "Calling func_real"
    $(tryrc --stdout=stdout --stderr=stderr func_real)
    assert_eq 1 ${rc}
    assert_eq "func stdout" "${stdout}"
    assert_eq "func stderr" "${stderr}"
}

ETEST_emock_args()
{
    func(){ true; }

    etestmsg "Mocking func"
    emock "func"

    ## CALL 1 (index 0) ##
    etestmsg "Calling func with arguments"
    func "1" "2" "3" "dogs and cats" "Anarchy"
    dump_state
    local args
    array_init_nl args "$(emock_args func)"

    etestmsg "Captured func $(lval args)"
    assert_eq 5 $(array_size args)
    assert_eq "1" "${args[0]}"
    assert_eq "2" "${args[1]}"
    assert_eq "3" "${args[2]}"
    assert_eq "dogs and cats" "${args[3]}"
    assert_eq "Anarchy"       "${args[4]}"

    assert_emock_called_with "func" 0 \
        "1" "2" "3" "dogs and cats" "Anarchy"

    expected=( "1" "2" "3" "dogs and cats" "Anarchy" )
    assert_emock_called_with "func" 0 "${expected[@]}"
}

ETEST_emock_body()
{
    func(){ true; }

    etestmsg "Mocking with body"
    emock func '
    {
        echo "Mocked with body called with args=$@"
        if [[ $1 == "foo" ]]; then
            return 1
        else
            return 0
        fi
    }'

    etestmsg "Calling with args=bar (should succeed)"
    $(tryrc func "bar")
    dump_state
    assert_eq 0 ${rc}
    etestmsg "Mocked function was called with:"
    cat .emock-$$/func/0/args
    assert_emock_called_with "func" 0 "bar"

    etestmsg "Mocked function return_code:"
    cat .emock-$$/func/0/return_code
    assert_emock_return_code "func" 0 0

    etestmsg "Calling with args=foo (should fail)"
    $(tryrc func "foo")
    dump_state
    assert_eq 1 ${rc}
    etestmsg "Mocked function was called with:"
    cat .emock-$$/func/1/args
    emock_args "func" 1
    assert_emock_called_with "func" 1 "foo"

    etestmsg "Mocked function return_code:"
    cat .emock-$$/func/1/return_code
    assert_emock_return_code "func" 1 1
}

# Verify leading indentation is stripped from mocked textfile body
ETEST_emock_body_textfile_indent()
{
    etestmsg "Mocking textfile with body with stripped indentation"
    emock --filesystem --textfile foo 'Line #1
    Line #2
        Line #3 is indented
    Line #4
    '

    etestmsg "Mock with whitespace stripped"
    cat foo

    assert_eq "Line #1" "$(cat foo | head -1)"
    assert_eq "Line #2" "$(cat foo | head -2 | tail -1)"
    assert_eq "    Line #3 is indented" "$(cat foo | head -3 | tail -1)"
    assert_eq "Line #4" "$(cat foo | head -4 | tail -1)"
}

# Verify leading indentation is stripped from mocked textfile body properly when no content is provided on the
# first line and every other line is block-idented.
ETEST_emock_body_textfile_indent_empty_first_line()
{
    etestmsg "Mocking textfile with body with stripped indentation and empty first line"
    emock --filesystem --textfile actual '
        Line #1
            Line #2 is indented
        Line #3
    '

    etestmsg "Mock with whitespace stripped"
    cat -evt actual

    # Create expected file.
	cat >expected <<-EOF
	Line #1
	    Line #2 is indented
	Line #3
	EOF
    etestmsg "Expected"
    cat expected

    diff --unified expected actual

    # Manually check each line to be paranoid.
    assert_eq 3 "$(cat actual | wc -l)"
    assert_eq "Line #1"                 "$(cat actual | head -1)"
    assert_eq "    Line #2 is indented" "$(cat actual | head -2 | tail -1)"
    assert_eq "Line #3"                 "$(cat actual | head -3 | tail -1)"
}
