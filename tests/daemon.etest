#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License as
# published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later version.

[[ ${__EBASH_OS} == Linux ]] || return 0

#-----------------------------------------------------------------------------------------------------------------------
#
# Test Helpers
#
#-----------------------------------------------------------------------------------------------------------------------

source ${EBASH_HOME}/tests/daemon_expect.sh

netns_teardown_traphandler()
{
  $(opt_parse ns_name)

  # if the namespace was destroyed successfully in the test, we will have nothing to do.
  netns_exists ${ns_name} || return 0

  # The test is failing, so try to do what you can, but ignore command failures
  $(tryrc netns_remove_network testns_args)

  $(tryrc netns_delete ${ns_name})
}

netns_setup_connected_network()
{
    $(opt_parse \
        "netns_args_packname | Name of variable containing netns information. (Was created by netns
                               init with a name you chose)")

    netns_check_pack ${netns_args_packname}

    $(pack_import ${netns_args_packname})

    # this allows packets to come in on the real nic and be forwarded to the virtual nic. It turns on routing in the
    # kernel.
    echo 1 > /proc/sys/net/ipv4/ip_forward

    $(tryrc netns_exists ${ns_name})
    if [[ ${rc} -eq 1 ]] ; then
        edebug "ERROR: namespace [${ns_name}] does not exist"
        return 1
    fi

    if [[ -L /sys/class/net/${devname} ]] ; then
        edebug "WARN: device (${devname}) already exists, returning"
        return 0
    fi

    # We create all the virtual things we need. A veth pair, a tap adapter and a virtual bridge
    ip link add dev ${devname} type veth peer name ${devname}p
    ip link set dev ${devname} up
    ip tuntap add ${ns_name}_t mode tap
    ip link set dev ${ns_name}_t up
    ip link add ${ns_name}_br type bridge

    # put the tap adapter in the bridge
    ip link set ${ns_name}_t master ${ns_name}_br

    # put one end of the veth pair in the bridge
    ip link set ${devname} master ${ns_name}_br

    # give the bridge a cidr address (a.b.c.d/##)
    ip addr add ${bridge_cidr} dev ${ns_name}_br

    # bring up the bridge
    ip link set ${ns_name}_br up

    # put the other end of the veth pair in the namespace
    ip link set ${devname}p netns ${ns_name}

    # and rename the nic in the namespace to what was specified in the args
    ip netns exec ${ns_name} ip link set dev ${devname}p name ${peer_devname}

    # Add iptables rules to allow the bridge and the connected nic to MASQARADE
    netns_add_iptables_rules ${netns_args_packname}

    #add the cidr address to the nic in the namespace
    ip netns exec ${ns_name} ip addr add ${nic_cidr} dev ${peer_devname}
    ip netns exec ${ns_name} ip link set dev ${peer_devname} up

    # Add a route so that the namespace can communicate out
    ip netns exec ${ns_name} ip route add default via ${bridge_cidr//\/[0-9]*/}

    #DNS is taken care of by the filesystem (either in a chroot or outside)
}

netns_remove_network()
{
    $(opt_parse \
        "netns_args_packname | Name of variable containing netns information. (Was created by netns
                               init with a name you chose)")

    netns_check_pack ${netns_args_packname}

    $(pack_import ${netns_args_packname} ns_name connected_nic)

    local device basename_device
    for device in /sys/class/net/${ns_name}* ; do
      if [[ -L ${device} ]] ; then
          basename_device=$(basename ${device})
          ip link set ${basename_device} down
          ip link delete ${basename_device}
      fi
    done

    netns_remove_iptables_rules ${netns_args_packname}
}

netns_add_iptables_rules()
{
    $(opt_parse \
        "netns_args_packname | Name of variable containing netns information. (Was created by netns
                               init with a name you chose)")

    netns_supported iptables || return 0

    netns_check_pack ${netns_args_packname}

    $(pack_import ${netns_args_packname} ns_name connected_nic)

    local device
    for device in "${ns_name}_br" "${connected_nic}" "${@}"; do
        $(tryrc netns_iptables_rule_exists ${netns_args_packname} ${device})
        [[ ${rc} -eq 0 ]] && continue
        iptables -t nat -A POSTROUTING -o ${device} -j MASQUERADE
    done
}

netns_remove_iptables_rules()
{
    $(opt_parse \
        "netns_args_packname | Name of variable containing netns information. (Was created by netns
                               init with a name you chose)")

    netns_supported iptables || return 0

    netns_check_pack ${netns_args_packname}

    $(pack_import ${netns_args_packname} ns_name connected_nic)

    local device
    for device in "${ns_name}_br" "${connected_nic}" "${@}"; do
        $(tryrc netns_iptables_rule_exists ${netns_args_packname} ${device})
        [[ ${rc} -ne 0 ]] && continue
        iptables -t nat -D POSTROUTING -o ${device} -j MASQUERADE
    done
}

netns_iptables_rule_exists()
{
    $(opt_parse \
        "netns_args_packname | Name of variable containing netns information. (Was created by netns
                               init with a name you chose)" \
        "devname             | Network device to operate on.")

    netns_supported iptables || die "iptables nat support missing"

    netns_check_pack ${netns_args_packname}

    $(pack_import ${netns_args_packname} ns_name)

    iptables -t nat -nvL           | \
      sed -n '/POSTROUTING/,/^$/p' | \
      grep -v "^$"                 | \
      tail -n -2                   | \
      grep -q ${devname}
}

#-----------------------------------------------------------------------------------------------------------------------
#
# Unit Tests
#
#-----------------------------------------------------------------------------------------------------------------------

ETEST_daemon_init()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    daemon_init sleep_daemon     \
        "${DAEMON_EXPECT[@]}"    \
        name="Init Test Daemon"  \
        cmdline="sleep infinity" \
        pidfile=${pidfile}       \
        cfgfile=${cfgfile}

    unset pidfile cfgfile
    $(pack_import sleep_daemon)
    etestmsg "Sleep Daemon Settings: $(lval %sleep_daemon)"

    assert_eq "Init Test Daemon" "${name}"
    assert_eq "sleep infinity"   "${cmdline}"
    assert_eq "${FUNCNAME}.pid"  "${pidfile}"
    assert_eq "${FUNCNAME}.cfg"  "${cfgfile}"

    # Validate state file
    assert test -s ${cfgfile}
    unset name cmdline pidfile
    pack_load cfg ${cfgfile}
    $(pack_import cfg)
    etestmsg "On-Disk Settings: $(lval %cfg)"
    assert_eq "Init Test Daemon" "${name}"
    assert_eq "sleep infinity"   "${cmdline}"
    assert_eq "${FUNCNAME}.pid"  "${pidfile}"
}

ETEST_daemon_autostart()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    etestmsg "Starting infinity daemon"
    daemon_init sleep_daemon            \
        "${DAEMON_EXPECT[@]}"           \
        autostart="yes"                 \
        name="Test Daemon"              \
        cmdline="sleep infinity"        \
        pidfile=${pidfile}              \
        cfgfile=${cfgfile}

    # Wait for process to be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}
    assert process_running $(cat ${pidfile})
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon

    # Now stop it and verify proper shutdown
    local pid
    pid=$(cat ${pidfile})
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile
}

ETEST_daemon_start_stop()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    etestmsg "Starting infinity daemon"
    daemon_init sleep_daemon            \
        "${DAEMON_EXPECT[@]}"           \
        name="Test Daemon"              \
        cmdline="sleep infinity"        \
        pidfile="${pidfile}"            \
        cfgfile="${cfgfile}"

    daemon_start sleep_daemon

    # Wait for process to be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}
    assert process_running $(cat ${pidfile})
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon

    # Now stop it and verify proper shutdown
    local pid
    pid=$(cat "${pidfile}")
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile
}

ETEST_daemon_start_stop_start()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    etestmsg "Starting infinity daemon"
    daemon_init sleep_daemon            \
        "${DAEMON_EXPECT[@]}"           \
        name="Test Daemon"              \
        cmdline="sleep infinity"        \
        pidfile="${pidfile}"            \
        cfgfile="${cfgfile}"

    daemon_start sleep_daemon

    # Wait for process to be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}
    assert process_running $(cat ${pidfile})
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon

    # Now stop it and verify proper shutdown
    local pid
    pid=$(cat "${pidfile}")
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile

    # Now start it up again
    daemon_start sleep_daemon

    # Wait for process to be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}
    assert process_running $(cat ${pidfile})
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon

    # Now stop it and verify proper shutdown
    local pid
    pid=$(cat "${pidfile}")
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile
}

# This test is different. 12.04 doesn't have a way to ask the system what netns a program is running in, and it's
# difficult to tell when you are in a namespace that you are there, and if you are there, which one you are in.
#
# So, I'm naming the internal nic something unique that I can look for. Then I I run a script in the namespace that
# will return 1 if the nic doesn't exist and sleep forever (like a daemon) if it does find it.
ETEST_daemon_netns()
{
    if ! cgroup_supported; then
        ewarn "Cgroups not supported"
        return 0
    fi

    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon
    local testns_args

    local local_ns_name="$$"

    if [[ $(id -u) -ne 0 ]] ; then
      etestmsg "Must be uid 0 (root) to manipulate namespaces"
      return 1
    fi

    netns_init testns_args                   \
        ns_name="${local_ns_name}"           \
        devname="${local_ns_name}_e0"      \
        peer_devname="e0_${local_ns_name}" \
        connected_nic="eth0"                 \
        bridge_cidr="127.0.0.2/24"           \
        nic_cidr="127.0.0.3/24"

    echo "$(lval %testns_args)"

    netns_check_pack testns_args

    $(pack_import testns_args)

    assert_false netns_exists ${ns_name}

    etestmsg "Creating namespace"
    netns_create ${ns_name}

    assert netns_exists ${ns_name}

    trap_add "netns_teardown_traphandler ${ns_name}"

    etestmsg "Creating network in namespace"
    netns_setup_connected_network testns_args

cat << 'END' > netns_runner
#!/bin/bash

$(${EBASH_HOME}/bin/ebash --source)

nic=${1:-eth0}

if [[ ! -e /sys/class/net/${nic} ]] ; then
    echo "$(basename $0): ERROR: ${nic} doesn't exist"
    echo "Valid nics: $(ls -m /sys/class/net)"
    exit 1
else
    sleep infinity
fi
END
    chmod +x netns_runner

    # This script is run from the directory output/daemon.sh/ETEST_daemon.sh/, which is a transient directory that only
    # exists during the test run and is cleaned up immediately after. Regardless, that is why the cmdline specifies the
    # script to run the way it does.
    etestmsg "Starting infinity daemon"
    daemon_init sleep_daemon                     \
        "${DAEMON_EXPECT[@]}"                    \
        name="Netns test daemon"                 \
        cmdline="./netns_runner ${peer_devname}" \
        netns_name=${ns_name}                    \
        pidfile="${pidfile}"                     \
        cfgfile="${cfgfile}"

    echo $(lval %sleep_daemon)

    $(pack_import sleep_daemon)

    daemon_start sleep_daemon

    etestmsg "Waiting for infinity daemon"
    # Wait for process to be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}
    assert process_running $(cat ${pidfile})
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon

    # Now stop it and verify proper shutdown
    local pid
    pid=$(cat "${pidfile}")
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile

    netns_remove_network testns_args
    netns_delete ${ns_name}

    assert_false netns_exists ${ns_name}
}

ETEST_daemon_cgroup()
{
    if ! cgroup_supported; then
        ewarn "Cgroups not supported"
        return 0
    fi

    CGROUP=${ETEST_CGROUP}/daemon
    cgroup_create ${CGROUP}

    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"

    etestmsg "Initializing daemon"
    daemon_init sleep_daemon      \
        "${DAEMON_EXPECT[@]}"     \
        name="cgroup test daemon" \
        cmdline="sleep infinity"  \
        cgroup=${CGROUP}          \
        pidfile="${pidfile}"      \
        cfgfile="${cfgfile}"

    etestmsg "Running daemon"
    daemon_start sleep_daemon
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon
    assert test -s ${pidfile}
    assert test -s ${cfgfile}

    local running_pids stopped_pids
    running_pids=$(cgroup_pids ${CGROUP})
    etestmsg "Daemon running $(lval CGROUP running_pids)"
    cgroup_pstree ${CGROUP}

    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    stopped_pids=$(cgroup_pids ${CGROUP})
    assert_empty "${stopped_pids}"
}

ETEST_daemon_hooks()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    daemon_init sleep_daemon     \
        "${DAEMON_EXPECT[@]}"    \
        name="hooks daemon"      \
        cmdline="sleep infinity" \
        pidfile="${pidfile}"     \
        cfgfile="${cfgfile}"     \
        respawns="3"             \
        respawn_interval="1"

    # START
    daemon_start sleep_daemon
    daemon_expect pre_start
    daemon_expect post_mount
    assert_true daemon_running sleep_daemon

    # STOP
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait
    assert_false daemon_running sleep_daemon
}

# Ensure if pre_start hook fails we won't call start
ETEST_daemon_pre_start_fail()
{
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    daemon_init sleep_daemon                      \
        name="pre_start_fail daemon"              \
        cmdline="sleep infinity"                  \
        pidfile="${pidfile}"                      \
        cfgfile="${cfgfile}"                      \
        pre_start="false"                         \
        pre_stop="touch ${FUNCNAME}.pre_stop"     \
        post_mount="touch ${FUNCNAME}.post_mount" \
        post_stop="touch ${FUNCNAME}.post_stop"   \
        respawns="3"                              \
        respawn_interval="1"                      \

    # START
    daemon_start sleep_daemon
    eretry -T=30s daemon_not_running sleep_daemon
    assert_not_exists ${FUNCNAME}.post_mount
}

# Ensure logfile works inside daemon
ETEST_daemon_logfile()
{
    eend()
    {
        true
    }

    launch()
    {
        echo "stdout" >&1
        echo "stderr" >&2
        sleep infinity
    }

    local mdaemon
    daemon_init mdaemon       \
        "${DAEMON_EXPECT[@]}" \
        name="My Daemon"      \
        cmdline="launch"      \
        logfile="logfile.log" \

    $(pack_import mdaemon logfile)

    (
        die_on_abort

        etestmsg "Starting daemon"
        daemon_start mdaemon
        daemon_expect pre_start
        daemon_expect post_mount
        assert_true daemon_running mdaemon

        # Give the daemon time to write and flush
        sleep 1

        etestmsg "Stopping daemon"
        daemon_stop mdaemon &
        daemon_expect pre_stop
        daemon_expect post_stop
        wait
        assert_true daemon_not_running mdaemon
    )

    # Show logfile and verify state
    etestmsg "Daemon logfile:"
    cat "${logfile}"

    grep --silent "Starting My Daemon" "${logfile}"
    grep --silent "stdout"             "${logfile}"
    grep --silent "stderr"             "${logfile}"
    grep --silent "Stopping My Daemon" "${logfile}"
}

ETEST_daemon_respawn()
{
    touch ${DAEMON_LOCK}
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    daemon_init sleep_daemon     \
        "${DAEMON_EXPECT[@]}"    \
        name="respawning daemon" \
        cmdline="sleep infinity" \
        pidfile="${pidfile}"     \
        cfgfile="${cfgfile}"     \
        respawns="3"             \
        respawn_interval="300"

    $(pack_import sleep_daemon)
    etestmsg "Starting daemon $(lval %sleep_daemon)"
    daemon_start sleep_daemon

    # Wait for pre_start and "start" states then daemon must be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon
    assert process_running $(cat ${pidfile})

    # Now kill it the specified number of respawns and verify it respawns each time
    for (( iter=1; iter<=${respawns}; iter++ )); do

        # Kill underlying pid
        pid=$(cat "${pidfile}")
        etestmsg "Killing daemon $(lval pid iter respawns)"
        ekilltree -s=KILL ${pid}

        # Wait for "crash" state. Daemon must be NOT running now.
        daemon_expect post_crash
        assert daemon_not_running sleep_daemon
        assert process_not_running ${pid}

        # If iter == respawns break out
        [[ ${iter} -lt ${respawns} ]] || break

        # Now wait for process to respawn
        etestmsg "Waiting for daemon to respawn"
        daemon_expect pre_start
        daemon_expect post_mount
        assert daemon_running sleep_daemon
        assert daemon_status  sleep_daemon
        assert process_running $(cat ${pidfile})
    done

    # Process should NOT be running and should NOT respawn b/c we killed it too many times
    etestmsg "Waiting for daemon to abort"
    daemon_expect post_abort
    assert_false process_running $(cat ${pidfile})
    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    daemon_stop sleep_daemon
}

# Modified version of above test which gives a large enough window between kills such that it should keep respawning
# (b/c/ failed count resets)
ETEST_daemon_respawn_reset()
{
    touch ${DAEMON_LOCK}
    local pidfile="${FUNCNAME}.pid"
    local cfgfile="${FUNCNAME}.cfg"
    local sleep_daemon

    daemon_init sleep_daemon        \
        "${DAEMON_EXPECT[@]}"       \
        name="respawn_reset daemon" \
        cmdline="sleep infinity"    \
        pidfile="${pidfile}"        \
        cfgfile="${cfgfile}"        \
        respawns="3"                \
        respawn_interval="0"

    $(pack_import sleep_daemon)
    etestmsg "Starting daemon $(lval %sleep_daemon)"
    daemon_start sleep_daemon

    # Wait for pre_start and "start" states then daemon must be running
    daemon_expect pre_start
    daemon_expect post_mount
    assert daemon_running sleep_daemon
    assert daemon_status  sleep_daemon
    assert process_running $(cat ${pidfile})

    # Now kill it the specified number of respawns and verify it respawns each time
    for (( iter=1; iter<=${respawns}; iter++ )); do

        # Kill underlying pid
        local pid
        pid=$(cat "${pidfile}")
        etestmsg "Killing daemon $(lval pid iter respawns)"
        ekilltree -s=KILL ${pid}

        # Wait for "crash" state. Daemon must be NOT running now.
        daemon_expect post_crash
        assert daemon_not_running sleep_daemon
        assert process_not_running ${pid}

        # Now wait for process to respawn
        etestmsg "Waiting for daemon to respawn"
        daemon_expect pre_start
        daemon_expect post_mount
        assert daemon_running sleep_daemon
        assert daemon_status  sleep_daemon
        assert process_running $(cat ${pidfile})
    done

    # Now stop it and verify proper shutdown
    etestmsg "Stopping daemon and waiting for shutdown"
    daemon_stop sleep_daemon &
    daemon_expect pre_stop
    daemon_expect post_stop
    wait

    assert_false daemon_running sleep_daemon
    assert_false daemon_status -q sleep_daemon
    assert_not_exists pidfile
}

ETEST_daemon_output()
{
    local script=${FUNCNAME}.testscript
cat >${script} <<EOF
#!/usr/bin/env bash

echo "Starting test"
while true ; do
    echo ${FUNCNAME}:stdout
    echo ${FUNCNAME}:stderr >&2
    sleep .1
done
EOF
    chmod +x ${script}
    script=$(readlink -m ${script})

    local logfile
    logfile=$(readlink -m logfile)

    daemon_init noisy_daemon    \
        "${DAEMON_EXPECT[@]}"   \
        name="noisy daemon"     \
        cmdline="${script}"     \
        logfile="${logfile}"

    ebanner "Running noisy daemon with logfile, which should make it quiet"

    EDEBUG=0 daemon_start noisy_daemon >stdout 2>stderr
    daemon_expect pre_start
    daemon_expect post_mount

    sleep .5

    daemon_stop noisy_daemon&
    daemon_expect pre_stop
    daemon_expect post_stop
    wait

    local stdout stderr
    stdout="$(cat stdout)"
    stderr="$(cat stderr)"

    local log_contents
    log_contents="$(cat ${logfile})"
    etestmsg stdout
    cat stdout
    etestmsg stderr
    cat stderr
    etestmsg logfile
    cat "${logfile}"

    assert_not_match "${stdout}"       "${FUNCNAME}"
    assert_not_match "${stderr}"       "${FUNCNAME}"
    assert_match     "${log_contents}" "${FUNCNAME}:stdout"
    assert_match     "${log_contents}" "${FUNCNAME}:stderr"

    ebanner "Running noisy daemon without logfile, so we should see output"

    unset noisy_daemon
    daemon_init noisy_daemon    \
        "${DAEMON_EXPECT[@]}"   \
        name="noisy daemon"     \
        cmdline="${script}"     \

    EDEBUG=0 daemon_start noisy_daemon >stdout 2>stderr
    daemon_expect pre_start
    daemon_expect post_mount

    sleep .5

    daemon_stop noisy_daemon&
    daemon_expect pre_stop
    daemon_expect post_stop
    wait

    local stdout stderr
    stdout="$(cat stdout)"
    stderr="$(cat stderr)"

    etestmsg stdout
    cat stdout
    etestmsg stderr
    cat stderr

    assert_match     "${stdout}" "${FUNCNAME}:stdout"
    assert_match     "${stderr}" "${FUNCNAME}:stderr"
    assert_not_match "${stdout}" "stderr"
    assert_not_match "${stderr}" "stdout"
}
