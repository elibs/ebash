#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com> 
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

# Test-only PGP files
ETEST_PGP_PUBLIC="${EBASH_HOME}/unittest/etest_pgp_public.asc"
ETEST_PGP_PRIVATE="${EBASH_HOME}/unittest/etest_pgp_private.asc"
ETEST_PGP_PHRASE="${EBASH_HOME}/unittest/etest_pgp_phrase.txt"

make_testfile()
{
    # Generate some data into a file that we can checksum and such
    local testfile=testfile
    
    date > "${testfile}"
    echo "These are a few simple file contents that we can run some checksums against." >> "${testfile}"
    ls / >> "${testfile}"

    echo "${testfile}"
}

ETEST_emetadata_basic()
{
    local src meta
    src="$(make_testfile)"
    meta="${src}.meta"

    emetadata ${src} > ${meta}
    cat ${meta}
    pack_set MPACK $(cat ${meta})
    $(pack_import MPACK)

    assert_eq "${Filename}" "$(basename "${src}")"
    assert_eq "${Size}"     "$(stat --printf='%s' ${src})"
    assert_eq "${MD5}"      "$(md5sum    ${src} | awk '{print $1}')"
    assert_eq "${SHA256}"   "$(sha256sum ${src} | awk '{print $1}')"
    assert_eq "${SHA512}"   "$(sha512sum ${src} | awk '{print $1}')"

    # Ensure SHA1 has not been exported anymore since it's been broken and is not secure.
    assert_var_empty SHA1
}

ETEST_emetadata_symlink()
{
    local src lnk meta
    src="$(make_testfile)"
    ln -s "${src}" "${src}.lnk"
    lnk="${src}.lnk"
    meta="${lnk}.meta"

    emetadata ${lnk} > ${meta}
    cat ${meta}
    pack_set MPACK $(cat ${meta})
    $(pack_import MPACK)

    assert_eq "${Filename}" "$(basename "${lnk}")"
    assert_eq "${Size}"     "$(stat --printf='%s' ${src})"
    assert_eq "${MD5}"      "$(md5sum    ${src} | awk '{print $1}')"
    assert_eq "${SHA256}"   "$(sha256sum ${src} | awk '{print $1}')"
    assert_eq "${SHA512}"   "$(sha512sum ${src} | awk '{print $1}')"

    # Ensure SHA1 has not been exported anymore since it's been broken and is not secure.
    assert_var_empty SHA1
}

#
# Verify emetadata_check still validates SHA1 field if present even if we don't use it anymore
ETEST_emetadata_sha1_backwards_compatible()
{
    local src meta
    src="$(make_testfile)"
    meta="${src}.meta"
    emetadata ${src} > ${meta}
    
    # Insert legacy SHA1 field by hand since emetadata doesn't do it anymore. This way we can validate
    # that emetadata_check still checks it.
    echo "SHA1=$(sha1sum ${src} | awk '{print $1}')" >> ${meta}
    cat ${meta}
    pack_set MPACK $(cat ${meta})
    $(pack_import MPACK)

    assert_eq "${Filename}" "$(basename "${src}")"
    assert_eq "${Size}"     "$(stat --printf='%s' ${src})"
    assert_eq "${MD5}"      "$(md5sum    ${src} | awk '{print $1}')"
    assert_eq "${SHA1}"     "$(sha1sum   ${src} | awk '{print $1}')"
    assert_eq "${SHA256}"   "$(sha256sum ${src} | awk '{print $1}')"
    assert_eq "${SHA512}"   "$(sha512sum ${src} | awk '{print $1}')"
    
    emetadata_check ${src}
}

ETEST_emetadata_pgp()
{
    local src meta
    src="$(make_testfile)"
    meta="${src}.meta"
    emetadata -p="${ETEST_PGP_PRIVATE}" -k="$(cat ${ETEST_PGP_PHRASE})" ${src} > ${meta}
    cat ${meta}
    pack_set MPACK $(cat ${meta})
    $(pack_import MPACK)

    # Now validate what we just signed using public key
    emetadata_check -p="${ETEST_PGP_PUBLIC}" ${src}
}

ETEST_emetadata_failure()
{
    local src meta
    src="$(make_testfile)"
    meta="${src}.meta"

    emetadata ${src} > ${meta}
    cat ${meta}
    pack_set MPACK $(cat ${meta})
    $(pack_import MPACK)

    echo "${SECONDS}" >> ${src}
    assert_false emetadata_check ${src}
}
