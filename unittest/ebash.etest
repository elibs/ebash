#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# Tests specifically for the ebash binary
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

ETEST_ebash_bin_args()
{
    string=" alpha   omega "
    $(tryrc --rc rc --stderr stderr ${EBASH_HOME}/bin/ebash einfo "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_ebash_bin_symlink()
{
    string=" beta  gamma  "
    $(tryrc --rc rc --stderr stderr ${EBASH_HOME}/bin/ewarn "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_ebash_bin_symlink_name_plus_func()
{
    string="  omega  alpha  "
    $(tryrc --rc rc --stdout stdout ${EBASH_HOME}/bin/string trim "${string}")

    assert_eq 0 ${rc}
    assert_eq "omega  alpha" "${stdout}"
}

ETEST_ebash_bin_calls_repl()
{
    $(tryrc --rc rc --stderr stderr ${EBASH_HOME}/bin/ebash</dev/null)

    assert_eq 0 ${rc}
    assert_match "${stderr}" ">>.*ebash EBASH="
}

ETEST_ebash_bin_load()
{
cat<<'EOF' >testfile.sh
an_unusual_func()
{
    echo "in ${FUNCNAME}"
}
EOF

    output=$(${EBASH_HOME}/bin/ebash --load testfile.sh an_unusual_func)

    assert_match "${output}" "in an_unusual_func"

}

ETEST_ebash_bin_specify_name()
{
    string="  hello  there  "
    $(tryrc --rc rc --stderr stderr ${EBASH_HOME}/bin/ebash --name einfo "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_ebash_bin_right_args()
{
cat<<'EOF' >testfile.sh
argchecker()
{
    echo "called with args $1 $2"
}
argchecker_func()
{
    echo "called func with args $1 $2"
}
EOF

    $(tryrc --rc rc --stdout stdout ${EBASH_HOME}/bin/ebash --load testfile.sh argchecker ARG1 ARG2)

    etestmsg "Called as ebash $(lval stdout rc)"
    assert_eq "called with args ARG1 ARG2" "${stdout}"
    assert_eq 0 ${rc}

    $(tryrc --rc rc --stdout stdout ${EBASH_HOME}/bin/ebash --load testfile.sh --name argchecker ALPHA BETA )
    etestmsg "Called by binary name $(lval stdout rc)"
    assert_eq "called with args ALPHA BETA" "${stdout}"
    assert_eq 0 ${rc}

    $(tryrc --rc rc --stdout stdout ${EBASH_HOME}/bin/ebash --load testfile.sh --name argchecker func MARS JUPITER)
    etestmsg "Called by binary nume with func following $(lval stdout rc)"
    assert_eq "called func with args MARS JUPITER" "${stdout}"
    assert_eq 0 ${rc}
}

ETEST_ebash_bin_no_args()
{
    local output
    output=$(EMSG_PREFIX="" EFUNCS_COLOR=1 ewarn hi |& ${EBASH_HOME}/bin/noansi)
    etestmsg "$(lval output)"

    assert_eq ">> hi" "${output}"
}

ETEST_ebash_bin_printenv()
{
    local output
    output=$(${EBASH_HOME}/bin/ebash --printenv)

    (
        ACTUAL_EBASH_HOME=${EBASH_HOME}
        ACTUAL_EBASH=${EBASH}

        unset EBASH_HOME
        unset EBASH
        eval "${output}"

        einfo "$(lval EBASH EBASH_HOME)"

        assert_eq "${ACTUAL_EBASH_HOME}" "${EBASH_HOME}"
        assert_eq "${ACTUAL_EBASH}" "${EBASH}"
    )
}

ETEST_ebash_color()
{
    ${EBASH_HOME}/bin/ebash --source --color    | grep 'EFUNCS_COLOR="1"'
    #${EBASH_HOME}/bin/ebash --source --no-color | grep 'EFUNCS_COLOR="0"'

    EFUNCS_COLOR=0 ${EBASH_HOME}/bin/ebash --source --color | grep 'EFUNCS_COLOR="1"'
}

ETEST_ebash_time()
{
    ${EBASH_HOME}/bin/ebash --source --time | grep 'EMSG_PREFIX="time_rfc3339"'
    #${EBASH_HOME}/bin/ebash --source --no-time | grep 'EMSG_PREFIX=""'

    EMSG_PREFIX=level ${EBASH_HOME}/bin/ebash --source --time | grep 'EMSG_PREFIX="level time_rfc3339"'
}

ETEST_ebash_interactive()
{
    ${EBASH_HOME}/bin/ebash --source --interactive | grep 'EINTERACTIVE="1"'
    #${EBASH_HOME}/bin/ebash --source --no-interactive | grep 'EINTERACTIVE=""'
}
