#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

ETEST_die_subprocesses()
{
    try
    {
        # Create a bunch of background processes
        sleep infinity& echo "$!"        >> pids
        sleep infinity& echo "$!"        >> pids
        bash -c 'sleep 1000' & echo "$!" >> pids
        bash -c 'sleep 4000' & echo "$!" >> pids

        etestmsg "Processes are running..."
        ps $(cat pids)

        die "Killing try block"
    }
    catch
    {
        true
    }

    local pids
    pids=$(cat pids)
    etestmsg "Ensuring processes died $(lval pids)"
    eretry --timeout 2s process_not_running $(cat pids)
}

# Ensure if we call die() that any subshell registered traps are executed before exit.
ETEST_die_traps()
{
    local fname="die_traps.txt"
    touch "${fname}"

    try
    {
        trap_add "rm ${fname}"
        die "Aborting subshell"
    }
    catch
    {
        true
    }

    assert test ! -e ${fname}
}

# Ensure if we have traps registered in our parent process that those are executed before death.
ETEST_die_traps_parent()
{
    local fname1="die_traps_parent.txt"
    local fname2="die_traps_child.txt"

    (
        disable_die_parent
        touch "${fname1}"
        trap_add "echo \"PARENT: Removing ${fname1}\"; rm --force ${fname1}"

        einfo "PARENT: Traps:"$'\n'"$(trap -p)"
        (
            disable_die_parent
            touch "${fname2}"
            trap_add "echo \"CHILD: Removing ${fname2}\"; rm --force ${fname2}"
            einfo "CHILD: Traps:"$'\n'"$(trap -p)"
            die "Aborting subshell"

        ) || true

    ) || true

    assert test ! -e ${fname1}
    assert test ! -e ${fname2}
}

# Ensure trap_add works properly and appends traps to existing ones.  NOTE: Use different signals throughout this test
# since trap_add operates on all of DIE_SIGNALS.
ETEST_die_trap_add()
{
    # Stub out die so that we don't actually die
    die()
    {
        echo "Fake die() called"
    }

    trap_add 'echo t1'
    assert_eq "echo t1; die [killed]" "$(trap_get SIGHUP)"

    foo()
    {
        trap_add "echo t2"
        assert_eq "echo t2; echo t1; die [killed]" "$(trap_get SIGINT)"

        (
            trap_add "echo t3"
            assert_eq "echo t3; die [killed]" "$(trap_get SIGKILL)"
            trap_add "echo t4"
            assert_eq "echo t4; echo t3; die [killed]" "$(trap_get SIGALRM)"
        )

        assert_eq "echo t2; echo t1; " "$(trap_get SIGUSR1)"
    }

    foo
    assert_eq "echo t1; " "$(trap_get SIGUSR2)"
}

ETEST_die_from_command_subst()
{
    foo()
    {
        die_on_abort
        einfo "foo BASHPID=${BASHPID}"
        echo eval
        $(bar)
        echo " ; echo hi_from_foo=$BASHPID ;"
    }

    bar()
    {
        die_on_abort
        einfo "bar BASHPID=${BASHPID}"
        echo "echo echo hi_from_bar=$BASHPID"
        die "Called die from bar"
    }

    try
    {
        $(foo)

        die -r=243 "Should have never reached this point."
    }
    catch
    {
        assert_ne 243 $?
    }
}

ETEST_err_trap_output_shorten_multiline_cmd()
{
    local script=./multiline_cmd_error
cat<<EOF >${script}
EBASH=${EBASH}
source "${EBASH}/ebash.sh" || exit 1
(
    false
    echo "Here is a really really really long message"
    baz
)
EOF
    chmod +x "${script}"

    local rc=0 stdout="" stderr=""
    ${script} 1>stdout 2>stderr || rc=$?
    stdout=$(cat stdout)
    stderr=$(cat stderr)

    etestmsg 'Foo ended with $(lval rc) and had stdout:'
    echo "${stdout}"
    etestmsg 'and stderr:'
    echo "${stderr}"

    # Error stacks will mention failure in foo
    assert_match     "${stderr}" "$(basename ${script})"

    # The false command is the one that blew up
    assert_match     "${stderr}" "false"


    ########### DISABLED ON BASH 4.2 ##################################
    if [[ ${BASH_VERSINFO[0]} == 4 && ${BASH_VERSINFO[1]} == 2 ]] ; then
        ewarn "The last portion of this tests is disabled on bash 4.2 because a bug"
        ewarn "in bash prevents BASH_COMMAND from being set properly on subshells"
        ewarn "like the one used above."
        return 0
    fi

    # The later of the two stacks will be a SIGTERM because the shell failed and is informing it's parent via SIGTERM.
    # That message will be 1) truncated and 2) contain an ellipsis to indicate that it was truncated.
    assert_match     "${stderr}" "\[UnhandledError.*cmd=\(.*\.\.\.\]"
    assert_not_match "${stderr}" "UnhandledError.*baz"
}

ETEST_err_trap_output_unhandled()
{

    local script=./unhandled_error
cat<<EOF >${script}
EBASH=${EBASH}
source "${EBASH}/ebash.sh" || exit 1

echo "A"
false
echo "B"

EOF
    chmod +x "${script}"

    local rc=0 stdout="" stderr=""
    ${script} 1>stdout 2>stderr || rc=$?
    stdout=$(cat stdout)
    stderr=$(cat stderr)

    etestmsg "${script} ended with $(lval rc) and had stdout:"
    echo "${stdout}"
    etestmsg "and stderr:"
    echo "${stderr}"

    assert_ne 0 "${rc}"

    assert_match "${stdout}" "A"
    assert_not_match "${stdout}" "B"


    assert_match "${stderr}" "false"
    assert_match "${stderr}" "${script##*/}"
    assert_match "${stderr}" "UnhandledError"


    rm ${script} stdout stderr

}
