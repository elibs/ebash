#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

ETEST_process_hierarchy()
{
    local my_processes_file ancessors_file ancestors_noarg_file children_file tree_file
    my_processes_file=$(mktemp --tmpdir pids_XXXXX)
    ancestors_file=$(mktemp --tmpdir ancestors_XXXXX)
    ancestors_noarg_file=$(mktemp --tmpdir ancestors_noarg_XXXXX)
    children_file=$(mktemp --tmpdir children_XXXXX)
    tree_file=$(mktemp --tmpdir tree_XXXXX)

    local first=$BASHPID
    echo $BASHPID >> ${my_processes_file}
    (
        echo $BASHPID >> ${my_processes_file}
        (
            echo $BASHPID >> ${my_processes_file}
            (
                echo $BASHPID >> ${my_processes_file}
                (
                    etestmsg "Process tree"
                    pstree $$

                    process_ancestors ${BASHPID} > ${ancestors_file}
                    process_ancestors > ${ancestors_noarg_file}

                    process_children ${first} > ${children_file}
                    process_tree ${first} > ${tree_file}
                )
            )
        )
    )

    local last
    last=$(tail -n 1 ${my_processes_file})

    etestmsg "my_processes"
    cat ${my_processes_file}
    etestmsg "ancestors of ${last}"
    cat ${ancestors_noarg_file}
    etestmsg "ancestors_noarg of ${last}"
    cat ${ancestors_noarg_file}
    etestmsg "children of ${first}"
    cat ${children_file}

    local my_processes ancestors ancestors_noarg children tree
    my_processes=( $(cat ${my_processes_file}) )
    ancestors=( $(cat ${ancestors_file}) )
    ancestors_noarg=( $(cat ${ancestors_noarg_file}) )
    children=( $(cat ${children_file}) )
    tree=( $(cat ${tree_file}) )

    etestmsg "Verifying children $(lval my_processes children first)"
    etestmsg "$(declare -p my_processes)"
    assert_eq 1 $(array_size children)
    assert_eq "${my_processes[1]}" "${children[0]}"


    # The rest of the verification steps are just checking that a list of
    # processes match, not checking them in order, so we'll sort them to make
    # that easier.
    array_sort my_processes ancestors ancestors_noarg children tree


    etestmsg "Verifying ancestors $(lval ancestors process)"
    # Note: there will be ancestors in the list that I don't know about (for instance, the etest processes), but I know
    # that the processes I created and added to pids should be in there.
    local process
    for process in ${my_processes[@]} ; do
        assert array_contains ancestors ${process}
        assert array_contains ancestors_noarg ${process}
    done

    etestmsg "Verifying tree contains my processes $(lval tree my_processes)"
    for process in ${my_processes[@]} ; do
        assert array_contains tree ${process}
    done
}

ETEST_ekill()
{
    # Start a simple process and ensure we can kill it
    yes >/dev/null &
    local pid=$!
    eretry -t=2s -T=20s process_running ${pid}

    ekill ${pid}
    wait ${pid} || true
    eretry -t=2s -T=20s process_not_running ${pid}
}

ETEST_ekill_elevate()
{
    ignore_term()
    {
        disable_die_parent
        die_on_abort
        trap '' SIGTERM
        etestmsg "signals ignored in ${BASHPID}, starting endless loop."
        while true ; do
            :
        done
        ewarn "endless loop finished"
    }

    ignore_term &
    local pid=$!

    assert process_running ${pid}
    local tree
    tree=$(process_tree ${pid})
    etestmsg "Background processes running $(lval tree pid)."

    etestmsg "Sending SIGTERM which will be ignored, but ekill will elevate to SIGKILL a second later."
    ekilltree -s=TERM -k=1s ${pid}

    etestmsg "Waiting for processes to get killed."
    eretry -t=2s -T=20s process_not_running ${tree}
}

ETEST_ekill_multiple()
{
    > pids
    yes >/dev/null & echo "$!" >> pids

    local idx
    for (( idx=0; idx<10; ++idx )); do
        sleep infinity &
        echo "$!" >> pids
    done

    local pids
    pids=( $(cat pids) )
    etestmsg "Killing all $(lval pids)"
    ekill ${pids[@]}

    etestmsg "Waiting for $(lval pid pids SECONDS)"
    eretry -t=2s -T=20s process_not_running ${pids[@]}
}

ETEST_ekilltree()
{
    > pids

    # Create a bunch of background processes
    (
        sleep infinity&        echo "$!" >> pids
        yes >/dev/null&        echo "$!" >> pids
        bash -c 'sleep 1000'&  echo "$!" >> pids

        # Wait on all our backgrounded processes. This ensures two important things:
        # (1) The entire subshell won't exit
        # (2) Processes we kill get reaped and don't show up in process list output anymore
        for pid in $(cat pids); do
            etestmsg "[main] Waiting for ${pid}"
            wait "${pid}" || true
            etestmsg "[main] ${pid} killed"
        done
    ) &

    local main_pid=$!
    echo "${main_pid}" >> pids

    local pids
    pids=( $(cat pids) )
    etestmsg "Killing $(lval main_pid) -- Expecting death from $(lval pids) -- My $(lval BASHPID)"
    pstree -c $$
    ekilltree ${main_pid}

    etestmsg "After killing $(lval main_pid) -- Expected death from $(lval pids) -- My $(lval BASHPID)"
    pstree -c $$
    eretry --timeout 5s process_not_running ${pids[@]}
}

ETEST_ekilltree_excludes_self()
{
    > pid

    try
    {
        sleep infinity&
        echo $! >> pid

        ekilltree -s=TERM ${BASHPID}
        ekilltree -s=KILL ${BASHPID}
    }
    catch
    {
        assert test $? -eq 0
    }

    assert_false process_running $(cat pid)
}

ETEST_ekilltree_exclude_abritrary()
{
    > safe_pid
    > kill_pid

    try
    {
        sleep infinity&
        process_tree $! >> safe_pid

        sleep infinity&
        echo $! >> kill_pid

        ekilltree -x="$(cat safe_pid)" -s=TERM ${BASHPID}
    }
    catch
    {
        assert test $? -eq 0
    }

    etestmsg "Ensuring safe process is still running $(cat safe_pid)"
    assert process_running $(cat safe_pid)
    etestmsg "And that other process is not $(cat kill_pid)"
    ewarn $(ps -ef | grep $(cat kill_pid) || true)
    eretry -t=2s -T=20s process_not_running $(cat kill_pid)
    ewarn $(ps -ef | grep $(cat kill_pid) || true)

    ekill -s=KILL $(cat safe_pid)
}

ETEST_process_parent_tree()
{

    local json correct_output
    json=$(echo "$(cat << EOM
[
    {
        "pid": 1,
        "ppid": 0,
        "cmd": "/sbin/init splash"
    },
    {
        "pid": 25473,
        "ppid": 1,
        "cmd": "tmux -u -2 -f /usr/share/byobu/profiles/tmuxrc new-session"
    },
    {
        "pid": 2895,
        "ppid": 25473,
        "cmd": "/bin/bash"
    },
    {
        "pid": 17389,
        "ppid": 2895,
        "cmd": "bash bin/ebash-repl"
    }
]
EOM
)" | jq -c .)

    correct_output=$(cat << EOM
(    1)* /sbin/init splash
(25473) * tmux -u -2 -f /usr/share/byobu/profiles/tmuxrc new-session
( 2895)  * /bin/bash
(17389)   * bash bin/ebash-repl
EOM
)
    ps()
    {
        assert_eq "$#" "3"

        #assert_eq can't handle a leading dash
        if ! [[ "$1" == "-o" ]] ; then
            die "invalid parameter"
        fi

        local pid=${3}

        case $2 in
            ppid=)
                echo "${json}" | jq -r ".[] | select(.pid==${pid})|.ppid"
                ;;
            args=)
                echo "${json}" | jq -r ".[] | select(.pid==${pid})|.cmd"
                ;;
            *)
                die "invalid commandline passed to ps"
                ;;
        esac
    }

    export -f ps

    assert_eq "$(process_parent_tree 17389)" "${correct_output}"
}
