#!/usr/bin/env bash
#
# Copyright 2011-2018, Marshall McMullen <marshall.mcmullen@gmail.com>
# Copyright 2011-2018, SolidFire, Inc. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

os linux || return 0

# Setup code mocks out some fake paths beneath a fake SYSFS tree for consistent testing even in Docker where we may
# not have actual sysfs tree.
setup()
{
    SYSFS="${TEST_DIR_OUTPUT}/sys"

    etestmsg "Creating mock network interfaces in ${SYSFS}"

    for ifname in eth0 eth1; do
        local ifdir
        ifdir="${SYSFS}/class/net/${ifname}"
        mkdir -p "${ifdir}/device"
        echo "a8:7e:ea:5d:e4:bd" > "${ifdir}/address"
    done

    find "${SYSFS}"
}

ETEST_get_network_ports()
{
    # Mock out netstat for consistent testability across all distros even in Docker where we may have no network ports
    netstat() {
		cat <<- "END"
			Active Internet connections (servers and established)
			Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
			tcp        0      0 0.0.0.0:5355            0.0.0.0:*               LISTEN      -
			tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      -
			tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -
			tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -
			tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      -
			tcp        0      0 192.168.86.52:35698     142.250.112.188:5228    ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:43182     192.168.86.81:8009      ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:41706     54.149.94.178:443       ESTABLISHED 1530185/slack --typ
			tcp        0      0 192.168.86.52:60274     52.114.158.191:443      ESTABLISHED 2087/teams
			tcp        0      0 192.168.86.52:42570     192.168.86.249:8008     ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:53148     54.203.112.76:443       ESTABLISHED 1530185/slack --typ
			tcp        0      0 192.168.86.52:51432     192.168.86.82:8009      ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:35351     52.114.159.142:443      ESTABLISHED 4036/537.36 --node-
			tcp        0      0 192.168.86.52:60332     52.96.79.82:993         ESTABLISHED 538231/mailsync.bin
			tcp        0      0 192.168.86.52:39016     52.114.128.85:443       ESTABLISHED 2087/teams
			tcp        0      0 192.168.86.52:40530     192.168.86.92:8009      ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:33772     192.168.86.182:8009     ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:35712     192.168.86.227:8009     ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:33104     52.96.164.130:993       ESTABLISHED 538231/mailsync.bin
			tcp        0      0 192.168.86.52:56336     192.168.86.81:8008      ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:41710     54.149.94.178:443       ESTABLISHED 1530185/slack --typ
			tcp        0      0 192.168.86.52:60596     140.82.113.25:443       ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:36786     192.168.86.248:8009     ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:34306     142.250.111.109:993     ESTABLISHED 3135/mailsync.bin
			tcp        0      0 192.168.86.52:50094     192.168.86.182:32085    ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:53154     54.203.112.76:443       ESTABLISHED 1530185/slack --typ
			tcp        0      0 192.168.86.52:50440     142.250.111.108:993     ESTABLISHED 3135/mailsync.bin
			tcp        0      0 192.168.86.52:46150     192.168.86.249:8009     ESTABLISHED 2355/chrome --type=
			tcp        0      0 192.168.86.52:36596     192.168.86.182:32159    ESTABLISHED 2355/chrome --type=
			udp        0      0 224.0.0.251:5353        0.0.0.0:*                           2093/chrome --new-w
			udp        0      0 0.0.0.0:5355            0.0.0.0:*                           -
			udp        0      0 192.168.122.1:53        0.0.0.0:*                           -
			udp        0      0 127.0.0.53:53           0.0.0.0:*                           -
			udp        0      0 0.0.0.0:67              0.0.0.0:*                           -
			udp        0      0 192.168.86.52:68        192.168.86.1:67         ESTABLISHED -
		END
    }

    local ports
    get_network_ports -l ports

    for key in $(array_indexes ports); do
        etestmsg $(lval key %ports[$key])
    done
}

ETEST_netselect()
{
    assert_eq "localhost" "$(netselect --quiet localhost)"
}

ETEST_get_network_pci_device_sanity()
{
    # Mock info pulled from samples of these nodes:
    # eth0-3:   R630 node
    # eth4-7:   VMware node
    # eth8-11:  VirtualBox node
    # eth12-15: KVM node
    # eth16-19: C220 node
    pack_set mock_nics eth0="bus-info: 0000:01:00.0" \
                       eth1="bus-info: 0000:01:00.1" \
                       eth2="bus-info: 0000:01:00.2" \
                       eth3="bus-info: 0000:01:00.3" \
                       \
                       eth4="bus-info: 0000:03:00.0" \
                       eth5="bus-info: 0000:0b:00.0" \
                       eth6="bus-info: 0000:13:00.0" \
                       eth7="bus-info: 0000:1b:00.0" \
                       \
                       eth8="bus-info: 0000:00:03.0" \
                       eth9="bus-info: 0000:00:08.0" \
                       eth10="bus-info: 0000:00:09.0" \
                       eth11="bus-info: 0000:00:0a.0" \
                       \
                       eth12="bus-info: 0000:00:1e.0" \
                       eth13="bus-info: 0000:00:1e.1" \
                       eth14="bus-info: 0000:00:1e.2" \
                       eth15="bus-info: 0000:00:1e.3" \
                       \
                       eth16="bus-info: 0000:09:00.0" \
                       eth17="bus-info: 0000:0a:00.0" \
                       eth18="bus-info: 0000:01:00.0" \
                       eth19="bus-info: 0000:01:00.1"

    # Mock out ethtool for invocation "ethtool -i ifname"
    ethtool(){ pack_get mock_nics $2; }

    for ifname in $(pack_keys mock_nics); do
        address=$(get_network_pci_device ${ifname})
        # Make sure the address looks like a PCI address
        edebug "$(lval ifname address)"
        [[ ${address} =~ ^[0-9]{4}:[0-9a-f]{2}:[0-9a-f]{2}\.[0-9] ]] || die "Invalid PCI address"
    done
}

ETEST_get_network_pci_device_hyperv()
{
    local addr_expected="vmbus_0_13"

    # Mock out ethtool to not return the requested info, as it behaves on HyperV VMs
    ethtool(){ echo ""; }

    # Mock out basename to return a HyperV looking address
    basename(){ echo "${addr_expected}"; }

    local ifaces=() addr_result=""
    ifaces=( $(get_network_interfaces) )
    addr_result=$(get_network_pci_device ${ifaces[0]})

    [[ ${addr_result} == ${addr_expected} ]] || die "$(lval test_addr) does not equal expected $(lval addr_expected)"
}

ETEST_netmask2cidr()
{
    local entry="" netmask="" expect="" actual=""
    for entry in "255.255.255.255:32" "255.255.255.254:31" "255.255.255.252:30" "255.255.255.248:29" \
                 "255.255.255.240:28" "255.255.255.224:27" "255.255.255.192:26" "255.255.255.128:25" \
                 "255.255.255.0:24"   "255.255.254.0:23"   "255.255.252.0:22"   "255.255.248.0:21"   \
                 "255.255.240.0:20"   "255.255.224.0:19"   "255.255.192.0:18"   "255.255.128.0:17"   \
                 "255.255.0.0:16"     "255.254.0.0:15"     "255.252.0.0:14"     "255.248.0.0:13"     \
                 "255.240.0.0:12"     "255.224.0.0:11"     "255.192.0.0:10"     "255.128.0.0:9"      \
                 "255.0.0.0:8"        "254.0.0.0:7"        "252.0.0.0:6"        "248.0.0.0:5"        \
                 "240.0.0.0:4"        "224.0.0.0:3"        "192.0.0.0:2"        "128.0.0.0:1"; do

        netmask=${entry%%:*}
        expect=${entry#*:}
        actual=$(netmask2cidr "${netmask}")
        etestmsg "$(lval netmask expect actual)"
        assert_eq "${expect}" "${actual}"
    done
}

ETEST_getvlans()
{

# command: ip link show type vlan
# output:
# 14: Bond10G.2172@Bond10G: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000
#     link/ether 36:81:9c:a0:10:be brd ff:ff:ff:ff:ff:ff
#
    ip()
    {
      echo " 14: ${testnic}.${vlan}@${testnic}: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP mode DEFAULT group default qlen 1000"
      echo "     link/ether 36:81:9c:a0:10:be brd ff:ff:ff:ff:ff:ff"
    }

    local testnic=Bond10G
    local vlan=2172

    # look for what $testnic is set to, should get $vlan back
    local output
    output="$(getvlans Bond10G)"
    etestmsg "looking for a match [$(lval vlan output)]"
    assert_eq "${output}" "${vlan}"


    # look for something other than what testnic is set to, should get back nothing.
    output="$(getvlans Bond1G)"
    etestmsg "looking for an empty string [$(lval output)]"
    assert_eq "${output}" ""
}
