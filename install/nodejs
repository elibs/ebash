#!/usr/bin/env bash
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}
source "${EBASH}/ebash.sh" || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

opt_usage main <<'END'
This script is used to install Nodejs and npm onto a system. For distros which have a new enough version packaged up in
the package manager we can simply invoke their installer. Otherwise we install Nodejs from the official upstream
tarball.
END

#----------------------------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------------------------

# Check to see which tools are installed. If any of these are installed, we assume things are peachy.
# This script will only attempt to install the latest LTS release of nodejs to satisfy the tool needs. If node, npm, or
# nvm are already available this script will be a no-op report stating that the tooling is already installed.

# TODO: Use latest gallium codename to determine the latest version of LTS
lts_codename="gallium"
lts_url="https://nodejs.org/download/release/latest-${gallium}/"

# TODO: Use the above to give a more dynamic way of setting these the values below
lts_version="16.13.2"
mac_lts_version="16"

# Grab the paths if they exist
nodejs_path=$(which node 2>/dev/null || echo "")
npm_path=$(which npm 2>/dev/null || echo "")
nvm_path=$(which nvm 2>/dev/null || echo "")

edebug "$(lval nodejs_path npm_path nvm_path)"

if [[ "${nvm_path}" == "" ]]; then
    ewarn "NVM has been detected:"
    ewarn "  $(lval nodejs_path)"
    einfo "The user will need to assume responsibility for proper nodejs installation."
    exit 0
fi

if [[ "${npm_path}" == "" || "${node_js_path}" == "" ]]; then
    ewarn "npm and/or nodejs has been detected: "
    ewarn "  $(lval npm_path node_js_path)"
    einfo "The user will need to assume responsibility for proper nodejs installation."
    exit 0
fi

# Determine what the name of the package is to install on this OS/Distro (if any).
package=""
if os darwin || os_distro alpine arch gentoo; then
    # This installes the latest lts version of node using brew
    package="node@${MAC_LTS_VERSION}"
elif os_distro fedora; then
    package="nodejs"
fi

# TODO: For linux, we'll need to grab the proper binary and install in the correct location for each linux distro
URL="https://nodejs.org/dist/v${lts_version}/node-v${lts_version}-linux-x64.tar.xz"

## If a package is available on this OS/distro install it. Otherwise download the package from upstream pre-built binary
#if [[ -n "${package}" ]]; then
#    pkg_install --sync "${package}"
#elif os linux; then
#
#    # If we already have nodejs, nvm, or npm don't do anything the user has things setup to their liking
#    if ! which go &>/dev/null; then
#        einfo "Go not available via package manager on $(os_pretty_name). Downloading from official Go URL."
#
#        # Download
#        version="$(curl --silent --location https://golang.org/VERSION?m=text)"
#        url="https://dl.google.com/go/${version}.linux-amd64.tar.gz"
#        tarball="${TMPDIR:-/tmp}/$(basename "${url}")"
#        eretry efetch --style=einfo "${url}" "${tarball}"
#        trap_add "rm -f ${tarball}"
#
#        # Extract
#        mkdir -p "/usr/local/bin"
#        tar --directory "/usr/local" --extract --gzip --file "${tarball}"
#
#        # Add symlinks to /usr/local/bin
#        einfo "Creating symbolic links for go binaries"
#        ln -sv "/usr/local/go/bin/"* "/usr/local/bin"
#    fi
#
#else
#    die "Cannot install Nodejs on $(os_pretty_name)"
#fi
#
## Verify installation succeeded
command_exists "npm"
command_exists "node"