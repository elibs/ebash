#!/usr/bin/env bash
#
# Copyright 2021, Marshall McMullen <marshall.mcmullen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Apache License
# as published by the Apache Software Foundation, either version 2 of the License, or (at your option) any later
# version.

: ${EBASH_HOME:=$(dirname $0)/..}
: ${EBASH:=${EBASH_HOME}/share}
source "${EBASH}/ebash.sh" || { echo "Unable to source ${EBASH}/ebash.sh" ; exit 1 ; }

opt_usage main <<'END'
This script is used to install and configure extra packages not normally required. The main use for this is for some
internal ebash test infrastructure where we need to install docker and configure it a particular way.
END
$(opt_parse \
    "+docker=1        | Install docker."                                                                    \
    "+docker_config=1 | Perform additional docker configuration required for internal ebash CI/CD testing." \
)

OS="$(os_pretty_name)"
ebanner --uppercase "Installing extra packages for $(lval OS)" \
    docker              \
    docker_config

#-----------------------------------------------------------------------------------------------------------------------
#
# Docker
#
#-----------------------------------------------------------------------------------------------------------------------

if [[ ${docker} -eq 1 ]] && ! command_exists docker; then

    einfo "Installing docker for $(lval OS)"

    # Some distros are not insane and you can simply install docker via their package managers!
    # Otherwise, perform custom installation steps for the distro in question.
    if os_distro alpine centos gentoo; then
        pkg_install docker

    # Darwin
    elif os darwin; then
        pkg_install docker docker-machine

    # Arch
    elif os_distro arch; then
        pacman -Syu --overwrite "/usr/bin/docker-init" --noconfirm  docker

    # Debian
    elif os_distro debian; then
        curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
        apt update
        apt install -y docker-ce

    # Fedora
    elif os_distro fedora; then
        dnf config-manager -y --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
        dnf install -y docker-ce docker-ce-cli containerd.io

    # Ubuntu
    elif os_distro ubuntu; then
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt update
        apt install -y docker-ce docker-ce-cli containerd.io
    else
        die "Unsupported $(lval OS)"
    fi
fi

#----------------------------------------------------------------------------------------------------------------------
#
# Docker Config
#
#----------------------------------------------------------------------------------------------------------------------

if [[ ${docker_config} -eq 1 ]]; then

    if os_distro centos; then

        # Quiet warning from podman
        touch /etc/containers/nodocker

        # Default podman configuration prevents overlayfs from working properly.
        sed -i 's|#mount_program = "/usr/bin/fuse-overlayfs"|mount_program = "/usr/bin/fuse-overlayfs"|' \
            /etc/containers/storage.conf

        if [ -e /usr/share/containers/containers.conf ]; then
            # Default cgroup settings for running podman inside docker doesn't work properly.
            # The recommendation in https://github.com/containers/podman/issues/6982 is to set cgroup_manager to "cgroupfs"
            sed -i 's|# cgroup_manager = "systemd"|cgroup_manager = "cgroupfs"|' \
                /usr/share/containers/containers.conf
        fi
    fi
fi
